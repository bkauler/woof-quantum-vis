#!/bin/bash
#(c) Barry Kauler Feb 2012, 2023 bkhome.org
#licence GPL3 refer /usr/share/doc/legal
#the intention of this script is to manage non-english translations of files.
#this is to include shell scripts, xml, .desktop and menu files.
#translation will only be for the current language, and UTF-8 must be enabled.
#120205 first release, handle gettext'ed scripts.
#120206 added internationalization management of menu.
#120206 simplify gui with help buttons.
#120206 add management of menu categories.
#120207 write translations to a folder in /root with full path, write.log, generate tarball.
#120208 support SSS domains. (read comments in /usr/share/sss/menu_strings/menu_strings for more info)
#120208 sync translated sss-file with master sss-file.
#120209 desk_strings domain translates target files in-place, so need workaround when edit TRANSLATION variables in desk_strings.*
#120209 ...ditto for script_strings
#120210 add handling XML files.
#120212 some tweaks.
#120213 rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in Woof).
#120213 added management of binary executables.
#120214 generate a langpack PET package.
#120215 added management of initrd files (initrd_strings SSS domain).
#120217 small message fixes.
#120217 support poeditor.
#120218 LANG=${ORIGLANG} prefix needed various places. 120219 a few more.
#120220 need 'head -n1' ex: /usr/local/petget/ui_Classic has export TEXTDOMAIN in two places.
#120224 add 'doc_strings' sss domain, for translating entire files (typically documentation files). 120225 improvements.
#120225 checkbox window to select what documentation files to edit. modify edit-complete message.
#120228 sync doc_strings sss file.
#120307 ROX-Filer now translated via /usr/share/doc/nls/ROX-Filer/ROX-Filer.pot
#120308 ROX-Filer .mo files are not in standard location. workaround when intltool-update fails.
#120309 binary executables, option to retain po file for later editing (instead of uncompile mo).
#120313 langpack pet help msg improved.
#120313 langpack pet: offer to find more po, mo, pot and t12s translations.
#120316 scoop up more translations. 120317 L18L: add man pages.
#120216 small mod. to a message.
#120729 L18L: problem gettext'ing zigbert's apps, which have a lot of scripts, but would like to combine into one .pot file.
#120731 revert 120729.
#120731 any script can have a pre-existing .pot file in /usr/share/doc/nls, it will automatically be used instead of generating a .pot file.
#120731 multiple scripts can have the same TEXTDOMAIN. these scripts can be anywhere. a single .pot will be created/edited.
#120926 want to accumulate many .desktop files (not just for installed pkgs), in /usr/share/applications.in.
#121124 edit script_strings.*, 'read -r' so backslash chars are not escapes.
#130502 L18L/BK: stay in a loop if there is an error converting .po to .mo.
#130503 test if .po file changed. 130506 bug fix.
#130503 L18L: rename AppInfo.xml to AppInfo.xml.in for langpack
#130512 acknowledge new translators.
#130526 L18L: intltool-update fails with ROX-Filer and xdialog, but msgmerge works.
#130807 L18L: need sync.
#140129 maybe run without devx.
#170818 rename to 'momanager0', scripts in /usr/share/doc/easy, replace "Puppy".
#170818 was getting wrapping. enforce --no-wrap
#190103 fix initrd_strings for easyos. 190105 added boot_strings. 
#190306 initrd back to SSS (was using gettext).
#201008 file 5.39 will also show "ELF 64-bit LSB pie executable" the default for gcc8+
#20210612 replaced all yaf-splash with gtkdialog-splash. note, still ok to kill yaf-splash, see gtkdialog-splash script.
#20211206 removed /root/my-applications
#20221031 if running as zeus, think need to bump up to root.
#20230106 /usr/sbin/momanager0 moved here, substantial rewrite started.
#20230107 automatic translation when create a po file. 20230108 .directory and .desktop files, sss files.
#20230125 removed sss initrd_strings
#20230211 auto translation fixes.
#20230212 prefix translations4tarball with pkgname. overhaul tarball creation.
#20230213 overhaul finding what pkg a file belongs to.
#20230215 also search /usr/share/applications.in & locale.in
#20230215 [new]translations: .xml files also go into WOOF folder.
#20230216 prevent duplicate entries in translations4tarball. tarball: UNKNOWN into WOOF
#20230216 find existing .mo files for binary executables.
#20230218 run defaulttexteditor with LANG=C, so have english ui
#20230222 major rethink /usr/share/locale.in only exist in rootfs-skeleton
#20230607 if newtranslations tarball already exists, make backup.
#20230626 new sudo-sh
#20230710 ignore .desktop with "NoDisplay=true"

#***MOMANAGER IS ENGLISH ONLY (NOT GETTEXT'ED)***
#it is for use by developers/translators with knowledge of english.

#20230626
if [ "$(whoami)" != "root" ];then
 if [ -x /usr/bin/sudo-sh ];then
  exec sudo-sh ${PPID} ${0} ${@}
 else
  exec sudo -A ${0} ${@}
 fi
fi

PARAM1=""
[ $1 ] && PARAM1="$1"

ORIGLANG=$LANG
export LANG=C

. /etc/DISTRO_SPECS
PUPNAME="${DISTRO_NAME/ */}" #exs: Puppy, Easy

. /etc/rc.d/PUPSTATE
GTKDIALOGEXE="gtkdialog"
mkdir -p /tmp/momanager
ADATE="`date +%Y%m%d`" #ex: 20220205
WINICON="gtk-preferences"; HELPICON="gtk-index" #gtk-info

ORIGLANG1="`echo -n $ORIGLANG | cut -f 1 -d '_'`"  #ex: de
ORIGLANG12="`echo -n $ORIGLANG | cut -f 1 -d '.'`" #ex: de_DE

if [ "$ORIGLANG1" = "en" ];then
 pupdialog --yes-label "Choose Locale" --no-label "Abort" --title "MoManager: non-English locale required" --background pink --colors --yesno "This application is intended for creation and editing of non-English translations of scripts, but your locale is currently \Zb${ORIGLANG}\ZB. Click the \ZbChoose Locale\ZB button to change locale -- be sure to enable UTF-8, and decline restarting the X-server so that this script will continue." 0 0
 if [ $? -eq 0 ];then
  chooselocale
  exec momanager
 else
  exit 1
 fi
fi
if [ "`echo -n $ORIGLANG | grep -i 'utf'`" = "" ];then
 pupdialog --title "MoManager: abort" --background pink --colors --msgbox "Sorry, your \Zblocale\ZB (language) must have UTF-8 enabled to use this application. Click the \Zbsetup\ZB icon on the desktop to change locale. Aborting." 0 0
 exit 1
fi

MISSINGFILE=""
[ "`which xgettext`" = "" ] && MISSINGFILE="${MISSINGFILE}xgettext "
[ "`which msginit`" = "" ] && MISSINGFILE="${MISSINGFILE}msginit "
[ "`which msgfmt`" = "" ] && MISSINGFILE="${MISSINGFILE}msgfmt "
[ "`which msgunfmt`" = "" ] && MISSINGFILE="${MISSINGFILE}msgunfmt "
[ "`which msgmerge`" = "" ] && MISSINGFILE="${MISSINGFILE}msgmerge"
if [ "$MISSINGFILE" ];then
 pupdialog --title "MoManager: abort" --background pink --colors --msgbox "Sorry, these needed utilities are missing: \Zb${MISSINGFILE}\ZB. Aborting." 0 0
 exit 1
fi

POEDITOR="`which poeditor`"
[ ! "$POEDITOR" ] && POEDITOR="`which poedit`"

EASYSFSMNTPT='/mnt/.easy_ro/easy_sfs'
ppPTN="s%${EASYSFSMNTPT}%%"

#download woof, to get latest files... no, too difficult, just put up warning...
export MM1_DLG="<window title=\"MoManager: welcome\" window_position=\"1\" resizable=\"false\" icon-name=\"${WINICON}\">
 <vbox>
  <text><label>Welcome, MoManager will help you to create and edit language translations for your country, for many of the applications in ${PUPNAME}.</label></text>
  <text><label>VERY IMPORTANT: You must be currently running the latest version of ${PUPNAME}. You can check the blog at bkhome.org/news for release announcements.</label></text>
  <text><label>If you are currently running the latest ${PUPNAME}, then click the 'OK' button to continue running MoManager:</label></text>
  <hbox>
   <button ok></button>
   <button cancel></button>
  </hbox>
 </vbox>
</window>
"
if [ ! "$PARAM1" ];then #on reentry, bypass this window.
 MM1RET="`$GTKDIALOGEXE --program=MM1_DLG`"
 [ "`echo "$MM1RET" | grep 'OK'`" = "" ] && exit 2
 
 #20230107
 pupdialog --colors --background yellow --backtitle "MoManager: automatic translation" --yes-label "Automatic" --no-label "No" --yesno "MoManager is capable of automatic translation. It is not perfect, and does require a human to check the translation; however, it can save a lot of time. An Internet connection is required. Click the \ZbAutomatic\ZB button to accept, else \ZbNo\ZB to decline..." 0 0
 if [ $? -eq 0 ];then
  touch /tmp/momanager/FLGautotrans
 else
  rm -f /tmp/momanager/FLGautotrans 2>/dev/null
 fi
fi

gtkdialog-splash -close never -bg orange -text "Please wait, scanning files..." &
yPID=$!

echo -n "" > /tmp/momanager/translations4tarball #to create the langpack PET.
TRANSLANG=""

poptop_func() {
 #passed param $1 is string to display at top of screen, optional $2 is color, $3 is timeout.
 BACKCOL='yellow'
 [ $2 ] && BACKCOL="$2"
 POPTIME='9'
 [ $3 ] && POPTIME="$3"
 echo "#!/bin/sh
 sleep 3
 gtkdialog-splash -bg ${BACKCOL} -placement top -timeout ${POPTIME} -text \"${1}\"
 " > /tmp/momanager/yafmsg9${POPTIME}
 chmod 755 /tmp/momanager/yafmsg9${POPTIME}
 /tmp/momanager/yafmsg9${POPTIME} & #msg has delay so will appear on top of text editor window.
}

#20230213
expand_builtin_func() {
 echo -n '' > /tmp/momanager/builtin-expanded
 #note, leading spaces are suppressed by read. IFS= causes not suppressed.
 #while IFS= read aLINE
 while read aLINE
 do
  if [ "${aLINE:0:1}" == "/" ];then
   aPATH="$aLINE"
  else
   #aFILE="${aLINE:1:999}"
   #echo "${aPATH}/${aFILE}" >> /tmp/momanager/builtin-expanded
   echo "${aPATH}/${aLINE}" >> /tmp/momanager/builtin-expanded
  fi
 done <<EOF
$(cat /root/.packages/builtin_files/${1})
EOF
}

#20230213
#supply file, find pkg name
#file can have full path or just filename...
where_file_from_func() {
 local lFILE
 lFILE="$1"
 aPKGNAME=''
 if [ "${lFILE:0:1}" == "/" ];then #20230215
  #momanager also searches usr/share/applications.in & locale.in, so modify path...
  lFILE="$(echo -n "$lFILE" | sed -e 's%/locale\.in/%/locale/%' -e 's%/applications\.in/%/applications/%')"
 fi
 #find out if builtin...
 zPTN="^${lFILE}$"
 PKGNAMEs="$(grep -F -x " ${lFILE##*/}" /root/.packages/builtin_files/* | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sort -u | tr '\n' ' ')"
 if [ "$PKGNAMEs" ];then #confirm full path.
  for AAA in $PKGNAMEs
  do
   if [ "${lFILE:0:1}" != "/" ];then
    #no path, so accept first hit...
    aPKGNAME="$AAA"
    break
   fi
   expand_builtin_func $AAA
   grep -q -F -x -f /tmp/momanager/builtin-expanded <<<"$lFILE"
   if [ $? -eq 0 ];then
    aPKGNAME="$AAA"
    break
   fi
  done
 fi
 #find out if user-installed...
 if [ "$aPKGNAME" == "" ];then
  if [ "${lFILE:0:1}" != "/" ];then
   #no path, so just look for filename...
   aPKGNAME="$(grep -F "/${lFILE}" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%')"
  else
   aPKGNAME="$(grep -x -F "$lFILE" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%')"
  fi
 fi
 #find out if in rootfs-skeleton (in woofQ)...
 if [ "$aPKGNAME" == "" ];then
  if [ "${lFILE:0:1}" != "/" ];then
   #no path, so just look for filename...
   grep -q -F -f /root/.packages/rootfs-skeleton.list <<<"/${lFILE}"
  else
   grep -q -F -x -f /root/.packages/rootfs-skeleton.list <<<"$lFILE"
  fi
  if [ $? -eq 0 ];then
   aPKGNAME="WOOF"
  fi
 fi
 #give up...
 if [ "$aPKGNAME" == "" ];then
  aPKGNAME="UNKNOWN"
 fi
}


#####SCRIPTS#######
#find all gettext'ed scripts...
#GETTEXTSCRIPTS="`find ${EASYSFSMNTPT}/bin ${EASYSFSMNTPT}/sbin ${EASYSFSMNTPT}/usr/bin ${EASYSFSMNTPT}/usr/sbin ${EASYSFSMNTPT}/usr/X11R7/bin ${EASYSFSMNTPT}/usr/local ${EASYSFSMNTPT}/etc/rc.d -maxdepth 4 -type f -executable | xargs -I INPUTFILE grep --files-with-matches '^export TEXTDOMAIN=' INPUTFILE | sed -e 's% %SPACECHAR%g' -e "$ppPTN" | sort | tr '\n' ' '`"
GETTEXTSCRIPTS="`find /bin /sbin /usr/bin /usr/sbin /usr/local /etc/rc.d /usr/share/doc -maxdepth 4 -type f -executable | xargs -I INPUTFILE grep --files-with-matches '^export TEXTDOMAIN=' INPUTFILE | sed -e 's% %SPACECHAR%g' | sort | tr '\n' ' '`" #170818 20211206

#find all matching .mo files...
YESCNT=0; NOCNT=0; YESMO_XML=""; NOMO_XML=""
for AGTS in $GETTEXTSCRIPTS
do
 xAGTS="`echo -n $AGTS | sed -e 's%SPACECHAR% %g'`"
 #120731 what if code is: export TEXTDOMAIN='abc' or export TEXTDOMAIN="abc" remove the quotes... NO, not allowed to have quotes!!!!
 TEXTDOMAINVALUE="`grep '^export TEXTDOMAIN=' "$xAGTS" | head -n 1 | cut -f 2 -d '=' | tr '\t' ' ' | cut -f 1 -d ' '`" #1202120 need 'head -n1' ex: /usr/local/petget/ui_Classic has export TEXTDOMAIN in two places.

 #20230213
 #want to know if from woofQ (rootfs-skeleton) or a builtin pkg or later-installed pkg...
 where_file_from_func ${xAGTS}
 #...returns aPKGNAME

 FNDMO=""
 #20230222 no longer have /usr/share/locale.in
 #20230215 .mo could be in locale or locale.in
 #actually, 3buildeasydistro will have removed duplicates, but check anyway...
 if [ -f /usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
  FNDMO="/usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
  TRANSLANG=$ORIGLANG12
 fi
 if [ -f /usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
  if [ "$FNDMO" == "" ];then
   FNDMO="/usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
   TRANSLANG=$ORIGLANG1
  fi
 fi
 
 if [ "$FNDMO" ];then
  YESCNT=$(($YESCNT + 1))
  YESMO_XML="${YESMO_XML}
<item>${xAGTS} (${TRANSLANG} ${TEXTDOMAINVALUE}.mo ${aPKGNAME})</item>"
  grep -q -F "${aPKGNAME} ${FNDMO}" /tmp/momanager/translations4tarball #20230216
  if [ $? -ne 0 ];then
   echo "${aPKGNAME} ${FNDMO}" >> /tmp/momanager/translations4tarball #20230212
  fi
 else
  NOCNT=$(($NOCNT + 1))
#  NOMO_XML="${NOMO_XML}
#<radiobutton><variable>NORAD${NOCNT}</variable><label>${xAGTS}</label></radiobutton>"
  NOMO_XML="${NOMO_XML}
<item>${xAGTS} (${TEXTDOMAINVALUE} ${aPKGNAME})</item>"
 fi
done
if [ "$YESMO_XML" ];then
 YESMO_XML="<combobox width-request=\"310\"><variable>YESMO_COMBO</variable>${YESMO_XML}</combobox>"
else
 #YESMO_XML="<text><label>nothing</label></text>"
 YESMO_XML="<combobox width-request=\"310\"><variable>EMPTYYESMO_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NOMO_XML" ];then
 NOMO_XML="<combobox width-request=\"330\"><variable>NOMO_COMBO</variable>${NOMO_XML}</combobox>"
else
 #NOMO_XML="<text><label>nothing</label></text>"
 NOMO_XML="<combobox width-request=\"330\"><variable>EMPTYNOMO_COMBO</variable><item>--empty--</item></combobox>"
fi

#######MENU ENTRIES#######
#find out which .desktop files have [lang] entries already, create two lists...
YESDESK_XML=""; NODESK_XML=""
dPTN="\\[${ORIGLANG1}\\]"
for aDESKTOP in `find /usr/share/applications -mindepth 1 -maxdepth 1 -type f -name '*.desktop' | grep -v ' ' | sort | tr '\n' ' '`
do
 [ "`grep '^Icon' $aDESKTOP`" = "" ] && continue #some dummy .desktop files used by xfce, ignore them.
 if grep -q '^NoDisplay=true' ${aDESKTOP};then continue; fi #20230710 ignore these
 aDESKNAME="`basename $aDESKTOP`"
 
 #20230213
 #want to know if from woofQ (rootfs-skeleton) or a builtin pkg or later-installed pkg...
 where_file_from_func ${aDESKTOP}
 #...returns aPKGNAME
 
 if [ "`grep "$dPTN" $aDESKTOP`" != "" ];then
  YESDESK_XML="${YESDESK_XML}
<item>${aDESKNAME} (${aPKGNAME})</item>"
  echo "${aPKGNAME} ${aDESKTOP}" >> /tmp/momanager/translations4tarball #20230212
 else
  NODESK_XML="${NODESK_XML}
<item>${aDESKNAME} (${aPKGNAME})</item>"
 fi
done

#20230215 also search applications.in
for aDESKTOP in `find /usr/share/applications.in -mindepth 1 -maxdepth 1 -type f -name '*.desktop' | grep -v ' ' | sort | tr '\n' ' '`
do
 [ "`grep '^Icon' $aDESKTOP`" = "" ] && continue #some dummy .desktop files used by xfce, ignore them.
 aDESKNAME="${aDESKTOP##*/}"
 #awkward, but think avoid duplicates....
 if [ -f /usr/share/applications/${aDESKNAME} ];then
  rm -f /usr/share/applications.in/${aDESKNAME}
  continue
 fi
 #want to know if from woofQ (rootfs-skeleton) or a builtin pkg or later-installed pkg...
 where_file_from_func ${aDESKTOP}
 #...returns aPKGNAME
 if [ "`grep "$dPTN" $aDESKTOP`" != "" ];then
  YESDESK_XML="${YESDESK_XML}
<item>${aDESKNAME} (${aPKGNAME})</item>"
  echo "${aPKGNAME} ${aDESKTOP}" >> /tmp/momanager/translations4tarball
 else
  NODESK_XML="${NODESK_XML}
<item>${aDESKNAME} (${aPKGNAME})</item>"
 fi
done

if [ "$YESDESK_XML" ];then
 YESDESK_XML="<combobox width-request=\"310\"><variable>YESDESK_COMBO</variable>${YESDESK_XML}</combobox>"
else
 #YESDESK_XML="<text><label>nothing</label></text>"
 YESDESK_XML="<combobox width-request=\"310\"><variable>EMPTYYESDESK_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NODESK_XML" ];then
 NODESK_XML="<combobox width-request=\"330\"><variable>NODESK_COMBO</variable>${NODESK_XML}</combobox>"
else
 #NODESK_XML="<text><label>nothing</label></text>"
 NODESK_XML="<combobox width-request=\"330\"><variable>EMPTYNODESK_COMBO</variable><item>--empty--</item></combobox>"
fi

#help buttons...
YESMO_HELP_MSG="${PUPNAME} has many <b>scripts</b>, applications that are plain text files, usually written in Bash or Ash. These scripts all have English capability, but language translation files may be created for them, known as <b>mo</b> files.
The drop-down list is a list of scripts for which there is a <b>mo</b> translation file in your language.
The drop-down list has extra information in brackets, in the format <b>(lang TEXTDOMAIN package)</b>. In particular, package=WOOF means the file is in woofQ, or the name of the package from which the file comes is given, or if not known then package=UNKNOWN.
A mo translation file in your language (${ORIGLANG12}) is at /usr/share/locale/${ORIGLANG12}/LC_MESSAGES/ or /usr/share/locale/${ORIGLANG1}/LC_MESSAGES/. You may select one of the scripts, then click the <b>Edit</b> button to update it.
Updating is required if the translation is incorrect or incomplete in any way. One reason this can happen is if there is a later version of the script with some changed English text strings."
export DLG_HELP_YESMO="<window resizable=\"false\" title=\"MoManager: Help edit mo files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${YESMO_HELP_MSG}\"</label><variable>VAR_HELP_YESMO</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESMO</action></button></hbox></vbox></window>"
YESMOHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESMO</action></button>'

NOMO_HELP_MSG="${PUPNAME} has many <b>scripts</b>, applications that are plain text files, usually written in Bash or Ash. These scripts all have English capability, but language translation files may be created for them, known as <b>mo</b> files.
The drop-down list is a list of scripts for which there is no <b>mo</b> translation file in your language.
The drop-down list has extra information in brackets, in the format <b>(TEXTDOMAIN package)</b>. In particular, package=WOOF means the file is in woofQ, or the name of the package from which the file comes is given, or if not known then package=UNKNOWN.
To create a translation file, select a script from the list, then click the <b>Create</b> button. This will open a file in a text editor which has all the English strings from the script, and below each you type in your translations. This file is known as a <b>po</b> file, and after saving and quiting the text editor, the file will be compiled into a binary format known as a <b>mo</b> file -- note, po files have a filename ending in .po and mo files end in .mo. It is the mo file that the script will use when it runs.
MoManager now supports automatic translation, but you will need to check that the translated text is sane. Also, some formatting may be missing from the translation; compare carefully with the English text to insert the formatting."
export DLG_HELP_NOMO="<window resizable=\"false\" title=\"MoManager: Help create mo files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${NOMO_HELP_MSG}\"</label><variable>VAR_HELP_NOMO</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NOMO</action></button></hbox></vbox></window>"
NOMOHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NOMO</action></button>'

YESDESK_HELP_MSG="The drop-down list is of .desktop files in /usr/share/applications, that have translations for your language.
The <b>Name[${ORIGLANG1}]</b> entry in these files is what you see when you click on the Menu button at bottom-left of the screen (or right-click on the desktop). There will be a translation for each application.
If you need to correct an entry, select the appropriate .desktop file, then click the <b>Edit</b> button.
Note, The drop-down list has extra information in brackets, which is the name of the package that the file belongs to. <b>WOOF</b> means that the file is in woofQ."
export DLG_HELP_YESDESK="<window resizable=\"false\" title=\"MoManager: Help edit menu entries\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${YESDESK_HELP_MSG}\"</label><variable>VAR_HELP_YESDESK</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESDESK</action></button></hbox></vbox></window>"
YESDESKHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESDESK</action></button>'

NODESK_HELP_MSG="The drop-down list is of .desktop files in /usr/share/applications, that do <i>not</i> have translations for your language.
The <b>Name[${ORIGLANG1}]</b> entry in these files is what you see when you click on the Menu button at bottom-left of the screen (in some puppies the menu button is placed elsewhere). There will be a translation for each application, but for these .desktop files there is no translation, so the entries will display in English.
If you wish to create a translation, select the appropriate .desktop file, then click the <b>Create</b> button.
Note, The drop-down list has extra information in brackets, which is the name of the package that the file belongs to. <b>WOOF</b> means that the file is in woofQ."
export DLG_HELP_NODESK="<window resizable=\"false\" title=\"MoManager: Help create menu entries\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${NODESK_HELP_MSG}\"</label><variable>VAR_HELP_NODESK</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NODESK</action></button></hbox></vbox></window>"
NODESKHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NODESK</action></button>'

#######MENU TITLES#######
#this gives us the list of .directory files in /usr/share/desktop-directories for the top-level titles... ex: Puppy-Setup.directory
TOPMENUFILES="`grep -m1 '<Directory>' /etc/xdg/menus/puppy-[^S]*.menu | cut -f 2 -d '>' | cut -f 1 -d '<' | grep 'directory$' | sort | tr '\n' ' '`"
YESTOP_XML=""; NOTOP_XML=""
dPTN="^Name\\[${ORIGLANG1}\\]"
for ATOPMENUFILE in $TOPMENUFILES
do
 if [ "`grep "$dPTN" /usr/share/desktop-directories/$ATOPMENUFILE`" != "" ];then
  #there is already a translation.
  YESTOP_XML="${YESTOP_XML}
<item>${ATOPMENUFILE}</item>"
  echo "WOOF /usr/share/desktop-directories/${ATOPMENUFILE}" >> /tmp/momanager/translations4tarball #20230212
 else
  NOTOP_XML="${NOTOP_XML}
<item>${ATOPMENUFILE}</item>"
 fi
done
if [ "$YESTOP_XML" ];then
 YESTOP_XML="<combobox width-request=\"310\"><variable>YESTOP_COMBO</variable>${YESTOP_XML}</combobox>"
else
 #YESTOP_XML="<text><label>nothing</label></text>"
 YESTOP_XML="<combobox width-request=\"310\"><variable>EMPTYYESTOP_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NOTOP_XML" ];then
 NOTOP_XML="<combobox width-request=\"330\"><variable>NOTOP_COMBO</variable>${NOTOP_XML}</combobox>"
else
 #NOTOP_XML="<text><label>nothing</label></text>"
 NOTOP_XML="<combobox width-request=\"330\"><variable>EMPTYNOTOP_COMBO</variable><item>--empty--</item></combobox>"
fi
#help buttons...
YESTOP_HELP_MSG="These are the top-level menu titles, or categories, that you see when you click on the 'Menu' button at bottom-left of the screen (or right-click on the desktop). The drop-down list is for those categories that already have a translation for the <b>${ORIGLANG1}</b> locale.
If you wish to change a translation, select a file from the drop-down list, then click the <b>Edit</b> button. A text editor will open, then edit the <b>Name[${ORIGLANG1}]</b> entry, then save and quit the editor. Afterward, the menu will refresh and you will be able to see the change."
export DLG_HELP_YESTOP="<window resizable=\"false\" title=\"MoManager: Help edit menu categories\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${YESTOP_HELP_MSG}\"</label><variable>VAR_HELP_YESTOP</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESTOP</action></button></hbox></vbox></window>"
YESTOPHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESTOP</action></button>'
NOTOP_HELP_MSG="These are the top-level menu titles, or categories, that you see when you click on the 'Menu' button at bottom-left of the screen (or right-click on the desktop). The drop-down list is for those categories that do <i>not</i> have a translation for the <b>${ORIGLANG1}</b> locale (so they will display in English).
If you wish to create a translation, select a file from the drop-down list, click the <b>Create</b> button. A text editor will open, then edit the <b>Name[${ORIGLANG1}]</b> entry, then save and quit the editor. Afterward, the menu will refresh and you will be able to see the change."
export DLG_HELP_NOTOP="<window resizable=\"false\" title=\"MoManager: Help edit menu categories\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${NOTOP_HELP_MSG}\"</label><variable>VAR_HELP_NOTOP</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NOTOP</action></button></hbox></vbox></window>"
NOTOPHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NOTOP</action></button>'

#######XML#######
#search $EASYSFSMNTPT to avoid devx files...
YESXML_XML='' ; NOXML_XML=''
#XMLFILES="`find ${EASYSFSMNTPT}/usr/local -type f -name '*.xml' | sed "s%^${EASYSFSMNTPT}%%" | sed -e 's% %SPACECHAR%g' | tr '\n' ' '`" #ex: /usr/local/apps/Connect/AppInfo.xml
XMLFILES="`find /usr/local -type f -name '*.xml' | sed -e 's% %SPACECHAR%g' | tr '\n' ' '`" #ex: /usr/local/apps/Connect/AppInfo.xml
aPTN="xml:lang=\"${ORIGLANG1}\""  #ex: xml:lang="de"
bPTN="xml:lang=\"${ORIGLANG12}\"" #ex: xml:lang="de_DE"
for aXMLFILE in $XMLFILES
do
 aXMLFILE="`echo -n "$aXMLFILE" | sed -e 's%SPACECHAR% %g'`"
 
 #[ "`echo -n "$aXMLFILE" | grep 'apps/ROX-Filer/'`" != "" ] && continue #120307 ROX-Filer now translated via /usr/share/doc/nls/ROX-Filer/ROX-Filer.pot
 #120308 ...no, we still need to edit this, see User Manual.
 
 #20230213
 #want to know if from woofQ (rootfs-skeleton) or a builtin pkg or later-installed pkg...
 where_file_from_func ${aXMLFILE}
 #...returns aPKGNAME
 
 FNDFLAG=''
 FNDFLAG="`grep "$aPTN" "$aXMLFILE"`"
 [ ! "$FNDFLAG" ] && FNDFLAG="`grep "$bPTN" "$aXMLFILE"`"
 if [ "$FNDFLAG" ];then
  #there is already a translation.
  YESXML_XML="${YESXML_XML}
<item>${aXMLFILE} (${aPKGNAME})</item>"
  echo "${aPKGNAME} ${aXMLFILE}" >> /tmp/momanager/translations4tarball #20230212
 else
  NOXML_XML="${NOXML_XML}
<item>${aXMLFILE} (${aPKGNAME})</item>"
 fi
done
if [ "$YESXML_XML" ];then
 YESXML_XML="<combobox width-request=\"310\"><variable>YESXML_COMBO</variable>${YESXML_XML}</combobox>"
else
 YESXML_XML="<combobox width-request=\"310\"><variable>EMPTYYESXML_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NOXML_XML" ];then
 NOXML_XML="<combobox width-request=\"330\"><variable>NOXML_COMBO</variable>${NOXML_XML}</combobox>"
else
 NOXML_XML="<combobox width-request=\"330\"><variable>EMPTYNOXML_COMBO</variable><item>--empty--</item></combobox>"
fi
#help buttons...
XML_COM_HELP="XML files are a form of structured data that applications (such as ROX-Filer) may use, and they may contain text that the application displays on-screen. The XML specification has a standard notation for text strings in different languages, using the <b>xml:lang</b> attribute. For example:

 &lt;Label&gt;Connect to the Internet now&lt;/Label&gt;
 &lt;Label xml:lang="ru"&gt;Подключиться к Интернет сейчас&lt;/Label&gt;
 &lt;Label xml:lang="ja"&gt;インターネット接続ウィザードを実行&lt;/Label&gt;
 &lt;Label xml:lang="zh_CN"&gt;运行互联网连接向导&lt;/Label&gt;"
YESXML_HELP_MSG="${XML_COM_HELP}

The XML files in the drop-down list already have xml:lang translations for your <b>${ORIGLANG1}</b> locale, however they might not be correct or complete so should be reviewed. Please select a file, then click the <b>Edit</b> button.
Note, the brackets alongside each filename in the drop-down list contains the name of the package that the file comes from -- WOOF means that the file comes from woofQ."
export DLG_HELP_YESXML="<window resizable=\"false\" title=\"MoManager: Help edit XML files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\" width-chars=\"70\"><label>\"${YESXML_HELP_MSG}\"</label><variable>VAR_HELP_YESXML</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESXML</action></button></hbox></vbox></window>"
YESXMLHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESXML</action></button>'
NOXML_HELP_MSG="${XML_COM_HELP}

The XML files in the drop-down list do <i>not</i> have xml:lang translations for your <b>${ORIGLANG1}</b> locale. You will need to determine where the translations are to be inserted. Please select a file, then click the <b>Create</b> button.
Note, the brackets alongside each filename in the drop-down list contains the name of the package that the file comes from -- WOOF means that the file comes from woofQ."
export DLG_HELP_NOXML="<window resizable=\"false\" title=\"MoManager: Help edit XML files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\" width-chars=\"70\"><label>\"${NOXML_HELP_MSG}\"</label><variable>VAR_HELP_NOXML</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NOXML</action></button></hbox></vbox></window>"
NOXMLHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NOXML</action></button>'

#######SSS#######
#Simple String Substitution
#manage translations in many non-executable data files.
#translations are kept in /usr/share/sss/$SSSDOMAIN/$SSSDOMAIN.$ORIGLANG1 ex: SSSDOMAIN=menu_strings ORIGLANG1=de
YESSSS_XML=""; NOSSS_XML=""
for ASSSDOMAIN in `find /usr/share/sss -mindepth 1 -maxdepth 1 -type d | sed -e 's%^/usr/share/sss/%%' | tr '\n' ' '`
do

 #120224 doc_strings is a special case, the translated file is elsewhere... 20230111 remove if-fi
 #if [ -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} ];then
  if [ "$ASSSDOMAIN" = "doc_strings" ];then
   cp -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN} /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} #120228 must always be same as orig.
   TRANSFLAG='fail'
   TRANSLATEDFILES="`grep '^SSS_TRANSLATION_RULE' /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} | cut -f 2 -d "'" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%" | tr '\n' ' '`" #'geanyfix
   for ATRANSLATEDFILE in $TRANSLATEDFILES
   do
    if [ -f $ATRANSLATEDFILE ];then
     echo "WOOF ${ATRANSLATEDFILE}" >> /tmp/momanager/translations4tarball #20230212
     TRANSFLAG='success'
    fi
   done
   #[ "$TRANSFLAG" = "fail" ] && rm -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} #because translated file(s) does not exist. 20230111 remove
  fi
 #fi

 if [ -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} ];then
  #there is already a translation.
  YESSSS_XML="${YESSSS_XML}
<item>${ASSSDOMAIN}.${ORIGLANG1}</item>"
  echo "WOOF /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1}" >> /tmp/momanager/translations4tarball #20230212
 else
  NOSSS_XML="${NOSSS_XML}
<item>${ASSSDOMAIN}</item>"
 fi
done
if [ "$YESSSS_XML" ];then
 YESSSS_XML="<combobox width-request=\"310\"><variable>YESSSS_COMBO</variable>${YESSSS_XML}</combobox>"
else
 YESSSS_XML="<combobox width-request=\"310\"><variable>EMPTYYESSSS_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NOSSS_XML" ];then
 NOSSS_XML="<combobox width-request=\"330\"><variable>NOSSS_COMBO</variable>${NOSSS_XML}</combobox>"
else
 NOSSS_XML="<combobox width-request=\"330\"><variable>EMPTYNOSSS_COMBO</variable><item>--empty--</item></combobox>"
fi
#help buttons... 190103... 190105...
SSS_DOMAINS_MSG="
<b>menu_strings</b>
These are translations for window manager and tray data files. For example, the JWM window manager has a data file /root/.jwmrc, which has some strings that appear in on-screen menus (apart from the main application menu).

<b>desk_strings</b>
These are translations for any text data-files that have some text that displays on-screen.

<b>script_strings</b>
These are translations for scripts. The SSS method works on original scripts (in any language, ex: Bash, Lua, Perl, Tcl), whereas the gettext and t12s methods require editing of the script (however, gettext is a much more powerful translation technique).

<b>boot_strings</b>
These are translations for Syslinux and reFind boot-manager menus in the boot-partition.

<b>doc_strings</b>
This is totally different from all the above, as translations are made of entire files, using a suitable editor -- this is typically documentation files."
YESSSS_HELP_MSG="<b>SSS</b> means Simple String Substitution, a simple method of language translation for any type of text files. Files are translated in-place, that is, the original English files are replaced by the translated files -- this is translation <i>before</i> execution, as opposed to gettext which is run-time translation. An <b>SSS domain</b> defines a class of files that need to be translated. The drop-down list contains domains that have <b>${ORIGLANG1}</b> translations, however do check them as the translations may be incomplete. The headings below are the various domains:
${SSS_DOMAINS_MSG}"
export DLG_HELP_YESSSS="<window resizable=\"false\" title=\"MoManager: Help edit SSS domains\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${YESSSS_HELP_MSG}\"</label><variable>VAR_HELP_YESSSS</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESSSS</action></button></hbox></vbox></window>"
YESSSSHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESSSS</action></button>'
NOSSS_HELP_MSG="<b>SSS</b> means Simple String Substitution, a simple method of language translation for any type of text files. Files are translated in-place, that is, the original English files are replaced by the translated files -- this is translation <i>before</i> execution, as opposed to gettext which is run-time translation. An <b>SSS domain</b> defines a class of files that need to be translated. The drop-down list contains domains that do <i>not</i> have <b>${ORIGLANG1}</b> translations (so any on-screen text will be in English). The headings below are the various domains:
${SSS_DOMAINS_MSG}"
export DLG_HELP_NOSSS="<window resizable=\"false\" title=\"MoManager: Help create SSS domains\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${NOSSS_HELP_MSG}\"</label><variable>VAR_HELP_NOSSS</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NOSSS</action></button></hbox></vbox></window>"
NOSSSHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NOSSS</action></button>'

########Binary executables#######
#20230216 find all .mo files... 20230222
YESCNT=0 ; NOCNT=0 ; YESBIN_XML="" ; NOBIN_XML=""
MOs="$(find /usr/share/locale/${ORIGLANG1}/LC_MESSAGES /usr/share/locale/${ORIGLANG12}/LC_MESSAGES -mindepth 1 -maxdepth 1 -type f -name '*.mo' 2>/dev/null)"
for aMO in ${MOs}
do
 aPKGNAME="$(basename $aMO .mo)"
 BINEXEC="$(which $aPKGNAME)"
 [ ! "$BINEXEC" ] && BINEXEC="$(find /usr/local -maxdepth 4 -executable -type f -name ${aPKGNAME})" #ex: /usr/local/simple_network_setup/proxy-setup
 if [ "$BINEXEC" ];then
  if [ "`file "$BINEXEC" | grep ' ELF ' | grep 'executable'`" != "" ];then #file 5.39 will also show "ELF 64-bit LSB pie executable"
   #have found binary executable for the .mo file...
   TEXTDOMAINVALUE="$aPKGNAME" #TEXTDOMAIN must be same as executable name.
   TRANSLANG="$(echo -n "$aMO" | cut -f 5 -d '/')"
   grep -q -F -x "${aPKGNAME} ${aMO}"  /tmp/momanager/translations4tarball
   if [ $? -ne 0 ];then #precaution.
    echo "${aPKGNAME} ${aMO}" >> /tmp/momanager/translations4tarball
   fi
   YESCNT=$(($YESCNT + 1))
   YESBIN_XML="${YESBIN_XML}
<item>${BINEXEC} (${TRANSLANG} ${TEXTDOMAINVALUE}.mo ${aPKGNAME})</item>"
  fi
 fi
done

#support a limited number of binary executables that have .pot files in /usr/share/doc/nls
for aNLSDIR in `ls -1 /usr/share/doc/nls | tr '\n' ' '`
do
 if [ -d  /usr/share/doc/nls/${aNLSDIR} ];then
  #120309 po files may now be there... ex: /usr/share/doc/nls/ROX-Filer/de.po
  FNDPO="`find /usr/share/doc/nls/${aNLSDIR} -mindepth 1 -maxdepth 1 -type f -name '*.po' | tr '\n' ' '`"
  for APO in $FNDPO
  do
   echo "WOOF ${APO}" >> /tmp/momanager/translations4tarball #20230212
  done
  BINEXEC=""
  BINEXEC="`which $aNLSDIR`"
  [ ! "$BINEXEC" ] && BINEXEC="`find /usr/local -maxdepth 4 -executable -type f -name "$aNLSDIR"`" #ex: /usr/local/simple_network_setup/proxy-setup
  if [ "$BINEXEC" ];then
   if [ "`file "$BINEXEC" | grep ' ELF ' | grep 'executable'`" != "" ];then #file 5.39 will also show "ELF 64-bit LSB pie executable"
    #have found binary executable for the pot file...
    TEXTDOMAINVALUE="$aNLSDIR" #TEXTDOMAIN must be same as executable name.
    
    #20230213
    #want to know if from woofQ (rootfs-skeleton) or a builtin pkg or later-installed pkg...
    where_file_from_func ${BINEXEC}
    #...returns aPKGNAME
 
    FNDMO=""
    #20230222 locale.in no longer exists
    #20230215 .mo could be in locale or locale.in
    #actually, 3buildeasydistro will have removed duplicates, but check anyway...
    if [ -f /usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
     FNDMO="/usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
     TRANSLANG=$ORIGLANG12
    fi
    if [ -f /usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
     if [ "$FNDMO" == "" ];then
      FNDMO="/usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
      TRANSLANG=$ORIGLANG1
     fi
    fi
    
    #120308 ROX-Filer is example where .mo is elsewhere. search all roxapps..
    if [ ! "$FNDMO" ];then
     FNDMO="`find /usr/local/apps -type f -name "${TEXTDOMAINVALUE}.mo"`"
     TRANSLANG=$ORIGLANG1
    fi
    if [ "$FNDMO" ];then
     PREFIXLOCALEDIR="`echo -n "$FNDMO" | sed -e 's%/LC_MESSAGES.*%%' | rev | cut -f 2-9 -d '/' | rev`" #ex: /usr/local/apps/ROX-Filer/Messages/de/LC_MESSAGES/ROX-Filer.mo, extract /usr/local/apps/ROX-Filer/Messages
     YESCNT=$(($YESCNT + 1))
     YESBIN_XML="${YESBIN_XML}
<item>${BINEXEC} (${TRANSLANG} ${TEXTDOMAINVALUE}.mo ${aPKGNAME})</item>"
     grep -q -F "${aPKGNAME} ${PREFIXLOCALEDIR}/${TRANSLANG}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo" /tmp/momanager/translations4tarball #20230216
     if [ $? -ne 0 ];then
      echo "${aPKGNAME} ${PREFIXLOCALEDIR}/${TRANSLANG}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo" >> /tmp/momanager/translations4tarball #120308 20230212
     fi
    else
     NOCNT=$(($NOCNT + 1))
     NOBIN_XML="${NOBIN_XML}
<item>${BINEXEC} (${TEXTDOMAINVALUE} ${aPKGNAME})</item>"
    fi
    
   fi
  fi
 fi
done
if [ "$YESBIN_XML" ];then
 YESBIN_XML="<combobox width-request=\"310\"><variable>YESBIN_COMBO</variable>${YESBIN_XML}</combobox>"
else
 YESBIN_XML="<combobox width-request=\"310\"><variable>EMPTYYESBIN_COMBO</variable><item>--empty--</item></combobox>"
fi
if [ "$NOBIN_XML" ];then
 NOBIN_XML="<combobox width-request=\"330\"><variable>NOBIN_COMBO</variable>${NOBIN_XML}</combobox>"
else
 NOBIN_XML="<combobox width-request=\"330\"><variable>EMPTYNOBIN_COMBO</variable><item>--empty--</item></combobox>"
fi
#help buttons...
YESBIN_HELP_MSG="MoManager provides translation support for a limited number of binary executables. These are executables in packages that have <b>pot</b> files at /usr/share/doc/nls. The drop-down list is of binary executables that already have a ${ORIGLANG1} or ${ORIGLANG12} translation, but you may wish to review the translations, especially if the version of the binary executable has changed. Select a file, then click the <b>Edit</b> button.

The drop-down list has extra information in brackets, in the format <b>(lang TEXTDOMAIN package)</b>. In particular, package=WOOF means the file is in woofQ, or the name of the package from which the file comes is given, or if not known then package=UNKNOWN.

A <b>pot</b> file is a translation template file. MoManager converts it to a <b>po</b> file, which is an editable form for your language, and it is finally compiled to a <b>mo</b> file and placed at /usr/share/locale.

There are many other binary executable applications in ${PUPNAME}, the packages of which may have <b>mo</b> files. If there is an <b>mo</b> file in your language, it may be edited via the drop-down list."
export DLG_HELP_YESBIN="<window resizable=\"false\" title=\"MoManager: Help edit mo files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${YESBIN_HELP_MSG}\"</label><variable>VAR_HELP_YESBIN</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_YESBIN</action></button></hbox></vbox></window>"
YESBINHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_YESBIN</action></button>'
NOBIN_HELP_MSG="MoManager provides translation support for a limited number of binary executables. These are executables in packages that have <b>pot</b> files at /usr/share/doc/nls. The drop-down list is of binary executables that do <i>not</i> have a ${ORIGLANG1} or ${ORIGLANG12} translation. To create one, select a file, then click the <b>Create</b> button.

The drop-down list has extra information in brackets, in the format <b>(TEXTDOMAIN package)</b>. In particular, package=WOOF means the file is in woofQ, or the name of the package from which the file comes is given, or if not known then package=UNKNOWN.

A <b>pot</b> file is a translation template file. MoManager converts it to a <b>po</b> file, which is an editable form for your language, and it is finally compiled to a <b>mo</b> file and placed at /usr/share/locale.

There are many other binary executable applications in ${PUPNAME}, the packages of which may have <b>mo</b> files. If there is an <b>mo</b> file in your language, it may be edited via the drop-down list."
export DLG_HELP_NOBIN="<window resizable=\"false\" title=\"MoManager: Help create mo files\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${NOBIN_HELP_MSG}\"</label><variable>VAR_HELP_NOBIN</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_NOBIN</action></button></hbox></vbox></window>"
NOBINHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_NOBIN</action></button>'

######translation tarballs#####
#help button for translation tarballs...
GENLANG="$ORIGLANG1"
[ "$TRANSLANG" ] && GENLANG="$TRANSLANG"
PET_HELP_MSG="When you click the <b>OK</b> button, two translation tarballs are created.

One is a collection of all translated files, the second is created or edited translation files since power-on.

If you wish to contribute to internationalization of EasyOS for other users, kindly send the <b>newtranslations</b> tarball to Barry, via the Puppy Linux Forum (member BarryK).
Barry will put new or edited translation files into woofQ, ready for the next build of EasyOS."
export DLG_HELP_PET="<window resizable=\"false\" title=\"MoManager: Help translation tarballs\" icon-name=\"${HELPICON}\" window_position=\"1\"><vbox><text use-markup=\"true\"><label>\"${PET_HELP_MSG}\"</label><variable>VAR_HELP_PET</variable></text><hbox><button><label>Close</label><action type=\"closewindow\">VAR_HELP_PET</action></button></hbox></vbox></window>"
PETHELP_XML='<button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action type="launch">DLG_HELP_PET</action></button>'




POEDIT_XML=""; POEDIT_CHECK='false'
if [ "$POEDITOR" ];then
 [ -e /var/local/poedit_check ] && POEDIT_CHECK='true'
 POEDIT_XML="<checkbox><label>Tick to use poedit (instead of text editor)</label><default>${POEDIT_CHECK}</default><variable>POCHECK</variable></checkbox> <text><label>\"    \"</label></text>"
fi

export MM2_DLG="<window title=\"MoManager: ${PUPNAME} files\" window_position=\"1\" resizable=\"false\" icon-name=\"${WINICON}\">
 <vbox>
 
  <text use-markup=\"true\" width-chars=\"86\"><label>\"<big>Welcome! To fully translate ${PUPNAME} to your <b>${ORIGLANG12}</b> locale, you need to get all of the files on the right-side drop-down lists over to the left-side lists. Simple! Click the help buttons for explanation about each list...</big>\"</label></text>

  <frame Scripts>
  <hbox>
   <vbox>
    <frame Scripts that have a mo file>
     <hbox>${YESMO_XML}<button><label>Edit</label><action>EXIT:edit_mo</action></button>${YESMOHELP_XML}</hbox>
    </frame>
   </vbox>
   <vbox>
    <frame Scripts that do not have a mo file>
     <hbox>${NOMO_XML}<button><label>Create</label><action>EXIT:create_mo</action></button>${NOMOHELP_XML}</hbox>
    </frame>
   </vbox>
  </hbox>
  </frame>
  
  <frame Menu categories>
   <hbox>
    <vbox>
     <frame Menu categories with a ${ORIGLANG1} translation>
      <hbox>${YESTOP_XML}<button><label>Edit</label><action>EXIT:edit_top</action></button>${YESTOPHELP_XML}</hbox>
     </frame>
    </vbox>
    <vbox>
     <frame Menu categories without a ${ORIGLANG1} translation>
     <hbox>${NOTOP_XML}<button><label>Create</label><action>EXIT:create_top</action></button>${NOTOPHELP_XML}</hbox>
     </frame>
    </vbox>
   </hbox>
  </frame>
  
  <frame Menu entries>
   <hbox>
    <vbox>
     <frame Menu entries with a ${ORIGLANG1} translation>
      <hbox>${YESDESK_XML}<button><label>Edit</label><action>EXIT:edit_desk</action></button>${YESDESKHELP_XML}</hbox>
     </frame>
    </vbox>
    <vbox>
     <frame Menu entries without a ${ORIGLANG1} translation>
     <hbox>${NODESK_XML}<button><label>Create</label><action>EXIT:create_desk</action></button>${NODESKHELP_XML}</hbox>
     </frame>
    </vbox>
   </hbox>
  </frame>
  
  <frame XML files>
   <hbox>
    <vbox>
     <frame XML files with a ${ORIGLANG1} translation>
      <hbox>${YESXML_XML}<button><label>Edit</label><action>EXIT:edit_xml</action></button>${YESXMLHELP_XML}</hbox>
     </frame>
    </vbox>
    <vbox>
     <frame XML files without a ${ORIGLANG1} translation>
     <hbox>${NOXML_XML}<button><label>Create</label><action>EXIT:create_xml</action></button>${NOXMLHELP_XML}</hbox>
     </frame>
    </vbox>
   </hbox>
  </frame>
  
  <frame SSS domains>
   <hbox>
    <vbox>
     <frame SSS domains with a ${ORIGLANG1} translation>
      <hbox>${YESSSS_XML}<button><label>Edit</label><action>EXIT:edit_sss</action></button>${YESSSSHELP_XML}</hbox>
     </frame>
    </vbox>
    <vbox>
     <frame SSS domains without a ${ORIGLANG1} translation>
     <hbox>${NOSSS_XML}<button><label>Create</label><action>EXIT:create_sss</action></button>${NOSSSHELP_XML}</hbox>
     </frame>
    </vbox>
   </hbox>
  </frame>

  <frame Binary executables>
   <hbox>
    <vbox>
     <frame Binary executables that have a mo file>
      <hbox>${YESBIN_XML}<button><label>Edit</label><action>EXIT:edit_bin</action></button>${YESBINHELP_XML}</hbox>
     </frame>
    </vbox>
    <vbox>
     <frame Binary executables that do not have a mo file>
     <hbox>${NOBIN_XML}<button><label>Create</label><action>EXIT:create_bin</action></button>${NOBINHELP_XML}</hbox>
     </frame>
    </vbox>
   </hbox>
  </frame>
  
  
  <hbox>
   ${POEDIT_XML}
   <text><label>Click OK to exit and create translations tarball:</label></text>
   <button ok><action>EXIT:create_tarball</action></button>
   ${PETHELP_XML}
   <text><label>\"                 \"</label></text>
   <button><label>About</label><action>pupdialog --background '#8080FF' --backtitle 'MoManager: About' --msgbox 'Created by Barry Kauler for ${PUPNAME} Linux. (c) Copyright Barry Kauler 2012, 2017, 2023 license GPL3 (refer /usr/share/doc/legal)' 0 0 & </action></button>
   <button><label>Exit</label><action>EXIT:quit</action></button>
  </hbox>
  
 </vbox>
</window>
"
#echo "$MM2_DLG" > /tmp/xxx #TEST
kill $yPID

MM1RET="`$GTKDIALOGEXE --program=MM2_DLG`"
eval "$MM1RET"

if [ "$POEDITOR" ];then
 if [ "$POCHECK" = "true" ];then
  touch /var/local/poedit_check
 else
  rm -f /var/local/poedit_check 2>/dev/null
  POEDITOR=""
 fi
fi

#note: edit_mo and create_mo have much common code, *to do* eliminate duplication.
case $EXIT in
 ########
 edit_mo)
  #ex: YESMO_COMBO='/usr/sbin/mousecheck (de mousecheck.mo)'
  ASCRIPT="`echo -n "$YESMO_COMBO" | cut -f 1 -d '(' | rev | cut -f 2-9 -d ' ' | rev`"
  ANAME="`basename "$ASCRIPT"`"
  aTRANSLANG="`echo -n "$YESMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ' '`" #ex: de
  AMO="`echo -n "$YESMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: mousecheck.mo
  APKGNAME="`echo -n "$YESMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 3 -d ' '`" #ex: bluefish  ex: WOOF
  AMOSPEC="/usr/share/locale/${aTRANSLANG}/LC_MESSAGES/${AMO}"
  ATEXTDOMAIN="`basename $AMO .mo`"
  cp -f "$AMOSPEC" /tmp/momanager/${ATEXTDOMAIN}.moOLD
  msgunfmt --no-wrap "$AMOSPEC" > /tmp/momanager/${ATEXTDOMAIN}1.po
  cd /tmp/momanager
  case $ATEXTDOMAIN in
   alsaconf)
    #rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in woofQ).
    cp -f /usr/share/doc/nls/alsaconf/alsaconf.pot ./
   ;;
   *)
    #120731 why not generalize the above. any script(s) can have a pre-existing .pot file and it will be used...
    if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ];then
     cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ./
    else
#     ALREADYSH="$(echo -n "$ANAME" | grep '\.sh$')" #120731
#     if [ "$ALREADYSH" = "" ];then
#      cp -f "$ASCRIPT" ${ANAME}.sh #hack
#      xANAME="${ANAME}.sh"
#     else
#      cp -f "$ASCRIPT" ${ANAME}
#      xANAME="$ANAME"
#     fi
     #120731 multiple scripts may have the same TEXTDOMAIN...
     tdPTN="^export TEXTDOMAIN=${ATEXTDOMAIN}"
     #EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g' | grep -v -x "${ASCRIPT}")"
     #no, i will drop the $ANAME from above, and put them all in consistent order...
     EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g')"
     if [ "$EXTRASCRIPTS" ];then
      echo -n "" > ./xEXTRASCRIPTS
      echo "$EXTRASCRIPTS" |
      while read ONEEXTRA
      do
       [ "$ONEEXTRA" = "" ] && continue
       [ ! -f "$ONEEXTRA" ] && continue #precaution.
       ONEBASE="$(basename "${ONEEXTRA}" .sh)"
       cp -f "$ONEEXTRA" ./${ONEBASE}.sh
       echo "${ONEBASE}.sh" >> ./xEXTRASCRIPTS
      done
      #LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap ${xANAME} `cat ./xEXTRASCRIPTS`
      LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap `cat ./xEXTRASCRIPTS`
#     else  #previous code...
#      LANG=${ORIGLANG} rxvt -e xgettext --no-wrap -o ${ATEXTDOMAIN}.pot ${xANAME}
     fi
    fi
   ;;
  esac
  #this syncs textdomain1.po and textdomain.pot, merges to textdomain.po ...
  rm -f ${ATEXTDOMAIN}.po 2>/dev/null
  #130526 L18L: intltool-update fails with ROX-Filer and xdialog, but msgmerge works...
  #LANG=${ORIGLANG} rxvt -e intltool-update --dist --gettext-package=${ATEXTDOMAIN} --output-file=${ATEXTDOMAIN}.po ${ATEXTDOMAIN}1
  LANG=${ORIGLANG} rxvt -e msgmerge --no-wrap --output-file=${ATEXTDOMAIN}.po ${ATEXTDOMAIN}1.po ${ATEXTDOMAIN}.pot  #130526 L18L.  170918
  BINMSG="The .mo file has been converted to an editable .po file. Edit, then Save, then Quit text editor..."
  ROPID=0 ; POPCOL='yellow'
  #120308 intltool-update is broken with some pot files. need a fallback method...
  if [ ! -s ${ATEXTDOMAIN}.po ];then
   LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot #create po file without any translations.
   LANG=${ORIGLANG} defaulttextviewer /tmp/momanager/${ATEXTDOMAIN}1.po & #warning, this must be different from defaulttexteditor!
   ROPID=$!
   #BINMSG="BAD NEWS: the 'intltool-update' utility was unable to merge your existing translations with the pot file. Therefore, the translations are open in a separate file '${ATEXTDOMAIN}1.po' and you must paste them into '${ATEXTDOMAIN}.po' -- edit the latter only! Edit '${ATEXTDOMAIN}.po', save, then quit..."
   BINMSG="BAD NEWS: the 'msgmerge' utility was unable to merge your existing translations with the pot file. Therefore, the translations are open in a separate file '${ATEXTDOMAIN}1.po' and you must paste them into '${ATEXTDOMAIN}.po' -- edit the latter only! Edit '${ATEXTDOMAIN}.po', save, then quit..."
   POPCOL='LightPink'
  fi
  poptop_func "$BINMSG" $POPCOL
  
  #130502 L18L/BK: stay in a loop if there is an error converting .po to .mo...
  ABORTFLG=0
  cp -f /tmp/momanager/${ATEXTDOMAIN}.po /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1
  while true ; do
   if [ "$POEDITOR" ];then
    LANG=${ORIGLANG} ${POEDITOR} /tmp/momanager/${ATEXTDOMAIN}.po
   else
    killall geany 2> /dev/null #otherwise geany will return immediately and continue executing this script.
    sleep 0.5
    LANG=C defaulttexteditor /tmp/momanager/${ATEXTDOMAIN}.po
   fi
   if diff -q /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1 /tmp/momanager/${ATEXTDOMAIN}.po  >/dev/null 2>&1; then #130503 130506
    ABORTFLG=8
    break
   fi
   LANG=${ORIGLANG} msgfmt --output-file=- /tmp/momanager/${ATEXTDOMAIN}.po >/dev/null 2>/tmp/momanager/po-2-mo.err
   [ ! -s /tmp/momanager/po-2-mo.err ] && break
   pupdialog --background '#FF8080' --backtitle "MoManager: po to mo fail" --extra-button --yes-label "Fix" --no-label "Abort" --extra-label "Revert" --yesno "There are errors in the .po file:

`cat /tmp/momanager/po-2-mo.err`

NOTE: The above error message is logged to /tmp/momanager/po-2-mo.err

Click the 'Fix' button to edit the .po file again...
Click 'Revert' to go back to original .po file, and try again...
Click 'Abort' to give up..." 0 0
   case $? in
    0)  continue  ;; #Fix
    3)  cp -f /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1 /tmp/momanager/${ATEXTDOMAIN}.po ; continue ;; #Revert
    *)  ABORTFLG=9 ; break ;; #1=Abort
   esac
  done
  
  [ $ROPID -ne 0 ] && kill $ROPID
  if [ $ABORTFLG -eq 0 ];then #130502
   LANG=${ORIGLANG} rxvt -e msgfmt --check --output-file=/tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/${ATEXTDOMAIN}.po
   pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo. If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB. Note, as a precaution, the old mo file is at /tmp/momanager/${ATEXTDOMAIN}.moOLD." 0 0
   ABORTFLG=$?
  fi
  if [ $ABORTFLG -eq 0 ];then #130502
   dirAMOSPEC="$(dirname $AMOSPEC)"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo "${dirAMOSPEC}/"
   #20230212...
   mkdir -p /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}/"
  else
   pupdialog --background pink --backtitle "MoManager: mo edit aborted" --msgbox "You have declined to update the mo file. Ok, the previous one has been retained." 0 0
  fi
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 create_mo)
  #ex: NOMO_COMBO='/usr/sbin/mousecheck (mousecheck)'
  ASCRIPT="`echo -n "$NOMO_COMBO" | cut -f 1 -d '(' | rev | cut -f 2 -d ' ' | rev`"
  ATEXTDOMAIN="`echo -n "$NOMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ' '`"
  APKGNAME="`echo -n "$NOMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: bluefish  ex: WOOFBUILTIN
  FIELD2ND="`echo -n "$ORIGLANG12" | cut -f 2 -d '_'`"
  pupdialog --colors --background yellow --backtitle "MoManager: mo language" --yes-label "${ORIGLANG1}" --no-label "${ORIGLANG12}" --yesno "Please click the \Zb${ORIGLANG1}\ZB button to create a translation file for that language. However, the \Zb${FIELD2ND}\ZB designates a particular country in which the language is used, and if you need such a specific translation then click the \Zb${ORIGLANG12}\ZB button. It is highly recommended that you click the \Zb${ORIGLANG1}\ZB button, unless you absolutely must have a country-specific translation..." 0 0
  if [ $? -eq 0 ];then
   aTRANSLANG="$ORIGLANG1"
  else
   aTRANSLANG="$ORIGLANG12"
  fi
#  ATEXTDOMAIN="`basename "$NOMO_COMBO"`"
#  if [ "`which $ATEXTDOMAIN`" = "" ];then #if not in path, then insert a prefix...
#   adirspec="`dirname "$NOMO_COMBO"`"
#   aprefix="`basename "$adirspec" | sed -e 's%[^a-zA-Z0-9]%%g'`"
#   ATEXTDOMAIN="${aprefix}___${ATEXTDOMAIN}"
#  fi
  ANAME="`basename "$ASCRIPT"`"
  AMO="${ATEXTDOMAIN}.mo"
  AMOSPEC="/usr/share/locale/${aTRANSLANG}/LC_MESSAGES/${AMO}"
  mkdir -p /usr/share/locale/${aTRANSLANG}/LC_MESSAGES
  cd /tmp/momanager
#  ALREADYSH="$(echo -n "$ANAME" | grep '\.sh$')" #120731
#  if [ "$ALREADYSH" = "" ];then
#   cp -f "$ASCRIPT" ${ANAME}.sh #hack, i think the .sh helps xgettext.
#   xANAME="${ANAME}.sh"
#  else
#   cp -f "$ASCRIPT" ${ANAME}
#   xANAME="$ANAME"
#  fi
  case $ATEXTDOMAIN in
   alsaconf)
    #rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in woofQ).
    cp -f /usr/share/doc/nls/alsaconf/alsaconf.pot ./
   ;;
   *)
    #120731 why not generalize the above. any script(s) can have a pre-existing .pot file and it will be used...
    if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ];then
     cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ./
    else
     #120731 multiple scripts may have the same TEXTDOMAIN...
     tdPTN="^export TEXTDOMAIN=${ATEXTDOMAIN}"
     #EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g' | grep -v -x "${ASCRIPT}")"
     #no, i will drop the $ANAME from above, and put them all in consistent order...
     EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g')"
     if [ "$EXTRASCRIPTS" ];then
      echo -n "" > ./xEXTRASCRIPTS
      echo "$EXTRASCRIPTS" |
      while read ONEEXTRA
      do
       [ "$ONEEXTRA" = "" ] && continue
       [ ! -f "$ONEEXTRA" ] && continue #precaution.
       ONEBASE="$(basename "${ONEEXTRA}" .sh)"
       cp -f "$ONEEXTRA" ./${ONEBASE}.sh
       echo "${ONEBASE}.sh" >> ./xEXTRASCRIPTS
      done
      #LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap ${xANAME} `cat ./xEXTRASCRIPTS`
      LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap `cat ./xEXTRASCRIPTS`
#     else  #previous code...
#      LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap ${xANAME}
      aPTN="s%Project-Id-Version: PACKAGE VERSION%Project-Id-Version: ${ANAME} VERSION%"
      bPTN="s%Content-Type: text/plain; charset=CHARSET%Content-Type: text/plain; charset=UTF-8%"
      cPTN="s% PACKAGE package% ${ANAME} package%"
      #dPTN="s%Content-Type: text/plain; charset=ASCII%Content-Type: text/plain; charset=UTF-8%"
      sed -i -e "$aPTN" -e "$bPTN" -e "$cPTN" ${ATEXTDOMAIN}.pot
     fi
    fi
   ;;
  esac
  LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot
  sync
  
  #20230107 msginit o/p needs fix...
  sed -i -e 's%Content-Type: text/plain; charset=ASCII%Content-Type: text/plain; charset=UTF-8%' ${ATEXTDOMAIN}.po
  
  cp -f /tmp/momanager/${ATEXTDOMAIN}.po /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1
  
  #20230107
  if [ -e /tmp/momanager/FLGautotrans ];then
   poptop_func "Automatic translation in progress..."
   rxvt -e /usr/local/momanager/pre-fill-po ${aTRANSLANG} ${ATEXTDOMAIN}.po
   cp -f /tmp/momanager/po-trans-file /tmp/momanager/${ATEXTDOMAIN}.po
  fi
  
  poptop_func "The translation file is now open in a text editor. Edit, then Save, then Quit text editor..."

  #130502 L18L/BK: stay in a loop if there is an error converting .po to .mo...
  ABORTFLG=0
  while true ; do
   if [ "$POEDITOR" ];then
    LANG=${ORIGLANG} ${POEDITOR} /tmp/momanager/${ATEXTDOMAIN}.po
   else
    killall geany 2> /dev/null #otherwise geany will return immediately and continue executing this script.
    sleep 0.5
    LANG=C defaulttexteditor /tmp/momanager/${ATEXTDOMAIN}.po
   fi
   if diff -q /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1 /tmp/momanager/${ATEXTDOMAIN}.po  >/dev/null 2>&1; then #130503 130506
    ABORTFLG=8
    break
   fi
   LANG=${ORIGLANG} msgfmt --output-file=- /tmp/momanager/${ATEXTDOMAIN}.po >/dev/null 2>/tmp/momanager/po-2-mo.err
   [ ! -s /tmp/momanager/po-2-mo.err ] && break
   pupdialog --background '#FF8080' --backtitle "MoManager: po to mo fail" --extra-button --yes-label "Fix" --no-label "Abort" --extra-label "Revert" --yesno "There are errors in the .po file:

`cat /tmp/momanager/po-2-mo.err`

NOTE: The above error message is logged to /tmp/momanager/po-2-mo.err

Click the 'Fix' button to edit the .po file again...
Click 'Revert' to go back to original .po file, and try again...
Click 'Abort' to give up..." 0 0
   case $? in
    0)  continue  ;; #Fix
    3)  cp -f /tmp/momanager/${ATEXTDOMAIN}.poBACKUP1 /tmp/momanager/${ATEXTDOMAIN}.po ; continue ;; #Revert
    *)  ABORTFLG=9 ; break ;; #1=Abort
   esac
  done

  if [ $ABORTFLG -eq 0 ];then #130502
   LANG=${ORIGLANG} rxvt -e msgfmt --check --output-file=/tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/${ATEXTDOMAIN}.po
   pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo (the former being the editable translation file and the latter being the compiled translation file). If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB." 0 0
   ABORTFLG=$?
  fi
  dirAMOSPEC="$(dirname "$AMOSPEC")"
  case $ABORTFLG in #130502
   0)
    cp -f /tmp/momanager/${ATEXTDOMAIN}.mo "${dirAMOSPEC}/"
    #20230212
    mkdir -p /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"
    cp -f /tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}/"
   ;;
   8) #130503
    pupdialog --background pink --backtitle "MoManager: mo create aborted" --msgbox "You did not change ${ATEXTDOMAIN}.po, so operation aborted." 0 0
   ;;
   9)
    pupdialog --background pink --backtitle "MoManager: mo create aborted" --msgbox "You failed to convert ${ATEXTDOMAIN}.po to an .mo file, so operation aborted." 0 0
   ;;
   *)
    pupdialog --background pink --backtitle "MoManager: mo create aborted" --msgbox "You have declined to use the mo file. Ok, it has been left at /tmp/momanager/${ATEXTDOMAIN}.mo and will not be used." 0 0
   ;;
  esac
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 edit_desk|create_desk)
  if [ "$EXIT" = "edit_desk" ];then
   DESKFILE="`echo -n "$YESDESK_COMBO" | cut -f 1 -d ' '`"
   #20230215 could be in applications or applications.in ...
   if [ -f /usr/share/applications/${DESKFILE} ];then
    DESKPATH='/usr/share/applications'
   else
    DESKPATH='/usr/share/applications.in'
   fi
   xASTAT1="`stat --format=%Y "${DESKPATH}/$DESKFILE"`" #seconds since epoch.
   APKGNAME="`echo -n "$YESDESK_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')'`"
   cp -f -a ${DESKPATH}/$DESKFILE /tmp/momanager/
  else
   aTRANSLANG="$ORIGLANG1" #20230211
   DESKFILE="`echo -n "$NODESK_COMBO" | cut -f 1 -d ' '`"
   #20230215 could be in applications or applications.in ...
   if [ -f /usr/share/applications/${DESKFILE} ];then
    DESKPATH='/usr/share/applications'
   else
    DESKPATH='/usr/share/applications.in'
   fi
   xASTAT1="`stat --format=%Y "${DESKPATH}/$DESKFILE"`" #seconds since epoch.
   APKGNAME="`echo -n "$NODESK_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')'`"
   cp -f -a ${DESKPATH}/$DESKFILE /tmp/momanager/
   #20230108
   if [ -e /tmp/momanager/FLGautotrans ];then
    poptop_func "Automatic translation in progress..."
    NAMEen="$(grep '^Name=.*' ${DESKPATH}/$DESKFILE | cut -f 2 -d '=')"
    NAMEtrans="$(trans -e bing -no-ansi -b -s en -t ${aTRANSLANG/_/-} "${NAMEen}")"
    sed -i -e "s%^Name=%Name[${ORIGLANG1}]=${NAMEtrans}\\nName=%" ${DESKPATH}/$DESKFILE
    COMMENTen="$(grep '^Comment=.*' ${DESKPATH}/$DESKFILE | cut -f 2 -d '=')"
    if [ "$COMMENTen" ];then
     COMMENTtrans="$(trans -e bing -no-ansi -b -s en -t ${aTRANSLANG/_/-} "${COMMENTen}")"
     sed -i -e "s%^Comment=%Comment[${ORIGLANG1}]=${COMMENTtrans}\\nComment=%" ${DESKPATH}/$DESKFILE
    fi
   else
    sed -i -e "s%^Name=%Name[${ORIGLANG1}]=PLEASE INSERT YOUR TRANSLATION HERE\\nName=%" ${DESKPATH}/$DESKFILE
   fi
  fi
  sync
  killall geany 2>/dev/null
  poptop_func "The menu file is now open in a text editor. Edit, then Save, then Quit text editor..."
  ASTAT="`stat --format=%y "${DESKPATH}/$DESKFILE" | cut -f 1 -d ' ' | tr -d '-' `" #so can check against file version in latest woofQ.
  [ -f ${EASYSFSMNTPT}${DESKPATH}/$DESKFILE ] && ASTAT="`stat --format=%y "${EASYSFSMNTPT}${DESKPATH}/$DESKFILE" | cut -f 1 -d ' ' | tr -d '-' `" #get orig modify date.
  LANG=C defaulttexteditor ${DESKPATH}/$DESKFILE
  xASTAT2="`stat --format=%Y "${DESKPATH}/$DESKFILE"`" #seconds since epoch.
  if [ "`grep 'PLEASE INSERT YOUR TRANSLATION HERE' ${DESKPATH}/$DESKFILE`" != "" ];then
   mv -f /tmp/momanager/$DESKFILE ${DESKPATH}/
   xASTAT2="$xASTAT1"
  fi
  if [ "$xASTAT1" = "$xASTAT2" ];then
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  gtkdialog-splash -bg '#80FF80' -timeout 3 -text "The menu is being updated..." &
  LANG=$ORIGLANG /usr/sbin/fixmenus
  pidof jwm >/dev/null
  if [ $? -eq 0 ];then
   LANG=${ORIGLANG} jwm -reload
  fi
  #cp -f ${DESKPATH}/${DESKFILE} /root/ #20230217 what is this line for?
  #20230212...
  mkdir -p /tmp/momanager/newtranslations/${APKGNAME}${DESKPATH}/
  cp -f ${DESKPATH}/${DESKFILE} /tmp/momanager/newtranslations/${APKGNAME}${DESKPATH}/
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 edit_top|create_top) #menu categories.
  aTRANSLANG="$ORIGLANG1" #20230211
  APKGNAME='WOOF'
  xASTAT1="`stat --format=%Y "/usr/share/desktop-directories/$TOPFILE"`" #seconds since epoch.
  if [ "$EXIT" = "edit_top" ];then
   TOPFILE="$YESTOP_COMBO"
   cp -f -a /usr/share/desktop-directories/$TOPFILE /tmp/momanager/
  else
   TOPFILE="$NOTOP_COMBO"
   cp -f -a /usr/share/desktop-directories/$TOPFILE /tmp/momanager/
   #20230108
   if [ -e /tmp/momanager/FLGautotrans ];then
    poptop_func "Automatic translation in progress..."
    NAMEen="$(grep '^Name=.*' /usr/share/desktop-directories/$TOPFILE | cut -f 2 -d '=')"
    NAMEtrans="$(trans -e bing -no-ansi -b -s en -t ${aTRANSLANG/_/-} "${NAMEen}")"
    sed -i -e "s%^Name=%Name[${ORIGLANG1}]=${NAMEtrans}\\nName=%" /usr/share/desktop-directories/$TOPFILE
    COMMENTen="$(grep '^Comment=.*' /usr/share/desktop-directories/$TOPFILE | cut -f 2 -d '=')"
    if [ "$COMMENTen" ];then
     COMMENTtrans="$(trans -e bing -no-ansi -b -s en -t ${aTRANSLANG/_/-} "${COMMENTen}")"
     sed -i -e "s%^Comment=%Comment[${ORIGLANG1}]=${COMMENTtrans}\\nComment=%" /usr/share/desktop-directories/$TOPFILE
    fi
   else
    sed -i -e "s%^Name=%Name[${ORIGLANG1}]=PLEASE INSERT YOUR TRANSLATION HERE\\nName=%" /usr/share/desktop-directories/$TOPFILE
   fi
  fi
  sync
  killall geany 2>/dev/null
  poptop_func "The menu-category file is now open in a text editor. Edit, then Save, then Quit text editor..."
  ASTAT="`stat --format=%y "/usr/share/desktop-directories/$TOPFILE" | cut -f 1 -d ' ' | tr -d '-' `" #so can check against file version in latest woofQ.
  [ -f ${EASYSFSMNTPT}/usr/share/desktop-directories/$TOPFILE ] && ASTAT="`stat --format=%y "${EASYSFSMNTPT}/usr/share/desktop-directories/$TOPFILE" | cut -f 1 -d ' ' | tr -d '-' `" #get orig modify date.
  LANG=C defaulttexteditor /usr/share/desktop-directories/$TOPFILE
  xASTAT2="`stat --format=%Y "/usr/share/desktop-directories/$TOPFILE"`" #seconds since epoch.

  if [ "`grep 'PLEASE INSERT YOUR TRANSLATION HERE' /usr/share/desktop-directories/$TOPFILE`" != "" ];then
   mv -f /tmp/momanager/$TOPFILE /usr/share/desktop-directories/
   xASTAT2="$xASTAT1"
  fi
  if [ "$xASTAT1" = "$xASTAT2" ];then
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  gtkdialog-splash -bg '#80FF80' -timeout 3 -text "The menu is being updated..." &
  LANG=$ORIGLANG /usr/sbin/fixmenus
  pidof jwm >/dev/null
  if [ $? -eq 0 ];then
   LANG=${ORIGLANG} jwm -reload
  fi
  #cp -f /usr/share/desktop-directories/$TOPFILE /root/ #20230217 what is this line for?
  #20230212...
  mkdir -p /tmp/momanager/newtranslations/${APKGNAME}/usr/share/desktop-directories
  cp -f /usr/share/desktop-directories/${TOPFILE} /tmp/momanager/newtranslations/${APKGNAME}/usr/share/desktop-directories/
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 ###########
 create_sss) #BK's Simple String Substitution method.
  APKGNAME="WOOF"
  SSSFILE="$NOSSS_COMBO" #ex: menu_strings (located at /usr/share/sss/menu_strings/)
  cp -f /usr/share/sss/$SSSFILE/$SSSFILE /tmp/momanager/$SSSFILE.$ORIGLANG1
  sync
  
  #120224 special handling req'd for doc_strings...
  if [ "$SSSFILE" = "doc_strings" ];then
   cp -f /usr/share/sss/$SSSFILE/$SSSFILE /usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1
   #ask what files want to edit (instead of just cycling through all of them)...
   CNT=0 ; CHKBOX_XML=""
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    CNT=$(($CNT + 1))
    CHKBOX_XML="${CHKBOX_XML}
<checkbox><variable>CHKBOX_${CNT}_</variable><default>true</default><label>${TARGETFILE}</label></checkbox>"
   done
   export MMx_DLG="<window title=\"MoManager: Documentation files\" window_position=\"1\" resizable=\"false\" icon-name=\"${WINICON}\">
   <vbox>
    <text><label>Please select the documentation files that you want to edit:</label></text>
    ${CHKBOX_XML}
    <hbox><button ok></button><button cancel></button></hbox>
   </vbox>
   </window>"
   MMxRET="`$GTKDIALOGEXE --program=MMx_DLG`"
   #now edit the doc files...
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
    CODEBLOCK="`sed -n "$sPTN" /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | sed -e '/^#/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
    [ ! "$CODEBLOCK" ] && continue #precaution.
    #allow any character to be the 'marker' for / in the section-id...
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    WHICHCHKBOX="`echo "$CHKBOX_XML" | grep "$TARGETFILE" | head -n 1 | grep -o 'CHKBOX_[0-9]*_'`"
    [ "`echo "$MMxRET" | grep "$WHICHCHKBOX" | grep 'true'`" = "" ] && continue #not selected
    SSS_POST_EXEC=""
    eval "$CODEBLOCK" #has variables SSS_HANDLER_EDITOR, SSS_TRANSLATION_RULE, SSS_HANDLER_VIEWER [, SSS_POST_EXEC]
    SSS_TRANSLATION_FILE="`echo -n "$SSS_TRANSLATION_RULE" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%"`"
    if [ "$TARGETFILE" = "$SSS_TRANSLATION_FILE" ];then
     #the translation is completely replacing the english file, so make a backup of the en file...
     FILETYPE="`echo -n "$TARGETFILE" | rev | cut -f 1 -d '.' | rev`" #ex: htm
     ftPTN="s%\.${FILETYPE}$%-en.${FILETYPE}%"
     ENFILE="`echo -n "$TARGETFILE" | sed -e "$ftPTN"`"
     if [ ! -f "$ENFILE" ];then
      if [ -f ${EASYSFSMNTPT}"${TARGETFILE}" ];then
       cp -f ${EASYSFSMNTPT}"${TARGETFILE}" "$ENFILE" #get it from sfs layer, to ensure it is en.
      else
       cp -f "${TARGETFILE}" "$ENFILE"
      fi
     fi
     TARGETFILE="$ENFILE"
    fi
    killall seamonkey 2>/dev/null
    killall seamonkey-bin 2>/dev/null
    killall geany 2>/dev/null
    [ ! -f "$SSS_TRANSLATION_FILE" ] && cp -a -f $TARGETFILE $SSS_TRANSLATION_FILE
    poptop_func "This is the original English file. Use this for reference only, do not edit. PLEASE WAIT..." orange 9
    LANG=${ORIGLANG} ${SSS_HANDLER_VIEWER} "$TARGETFILE" &
    dPID=$!
    sleep 10
    
    #20230109
    if [ -e /tmp/momanager/FLGautotrans ];then
     poptop_func "Automatic translation in progress..."
     echo -n '' > ${SSS_TRANSLATION_FILE}TRANS
     case "${SSS_TRANSLATION_FILE}" in
      *.htm|*.html)
       trans -e google -no-ansi -b -s en -t ${aTRANSLANG/_/-} -i ${SSS_TRANSLATION_FILE} -o ${SSS_TRANSLATION_FILE}TRANS
       mv -f ${SSS_TRANSLATION_FILE}TRANS ${SSS_TRANSLATION_FILE}
      ;;
      *) #plain text file...
       trans -e google -no-ansi -b -s en -t ${aTRANSLANG/_/-} -i ${SSS_TRANSLATION_FILE} -o ${SSS_TRANSLATION_FILE}TRANS
       mv -f ${SSS_TRANSLATION_FILE}TRANS ${SSS_TRANSLATION_FILE}
      ;;
     esac
    fi
    
    poptop_func "You must translate all of the text in this file to '${ORIGLANG1}' language. Edit, then Save, then Quit. Note, if you do not want to change anything, just Quit the editor..." yellow 11
    xASTAT1="`stat --format=%Y "$SSS_TRANSLATION_FILE"`" #seconds since epoch.
    LANG=${ORIGLANG} ${SSS_HANDLER_EDITOR} ${SSS_TRANSLATION_FILE}
    xASTAT2="`stat --format=%Y "$SSS_TRANSLATION_FILE"`" #seconds since epoch.
    kill $dPID
    [ "$xASTAT1" = "$xASTAT2" ] && continue
    DIRTRANSLATIONFILE="`dirname "${SSS_TRANSLATION_FILE}"`"
    mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}${DIRTRANSLATIONFILE}
    cp -a -f "${SSS_TRANSLATION_FILE}" /root/MoManager-${ORIGLANG12}-${APKGNAME}${DIRTRANSLATIONFILE}/
    echo "MACTION=${EXIT} TODAY_DATE=${ADATE} TRANS_FILE='${SSS_TRANSLATION_FILE}' AUTHOR='${AUTHORSPECS}'" >> /root/MoManager-${ORIGLANG12}-${APKGNAME}/write.log
    [ "$SSS_POST_EXEC" ] && ${SSS_POST_EXEC}
    pupdialog --background green --colors --backtitle "MoManager: SSS edit completed" --msgbox "You have translated file \Zb${SSS_TRANSLATION_FILE}\ZB. Click OK button to continue..." 0 0
   done
   mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}
   echo "MACTION=${EXIT} TODAY_DATE=${ADATE} SSS_FILE='/usr/share/sss/${SSSFILE}/${SSSFILE}.${ORIGLANG1}' AUTHOR='${AUTHORSPECS}'" >> /root/MoManager-${ORIGLANG12}-${APKGNAME}/write.log
   mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}/usr/share/sss/${SSSFILE}/
   cp -f /usr/share/sss/${SSSFILE}/$SSSFILE.$ORIGLANG1 /root/MoManager-${ORIGLANG12}-${APKGNAME}/usr/share/sss/${SSSFILE}/
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  
  killall geany 2>/dev/null
    
  #20230108
  xASTAT1="`stat --format=%Y "/tmp/momanager/$SSSFILE.$ORIGLANG1"`" #seconds since epoch.
  if [ -e /tmp/momanager/FLGautotrans ];then
   poptop_func "Automatic translation in progress..."
   rxvt -e /usr/local/momanager/pre-fill-sss ${aTRANSLANG} ${SSSFILE}.${ORIGLANG1}
   cp -f /tmp/momanager/sss-trans-file /tmp/momanager/${SSSFILE}.${ORIGLANG1}
  fi

  poptop_func "The SSS file is now open in a text editor. You must only edit between the last two % characters. Edit, then Save, then Quit text editor..."
  ASTAT="`stat --format=%y "/usr/share/sss/$SSSFILE/$SSSFILE" | cut -f 1 -d ' ' | tr -d '-'`" #so can check against file version in latest woofQ.
  [ -f ${EASYSFSMNTPT}/usr/share/sss/$SSSFILE/$SSSFILE ] && ASTAT="`stat --format=%y "${EASYSFSMNTPT}/usr/share/sss/$SSSFILE/$SSSFILE" | cut -f 1 -d ' ' | tr -d '-' `" #get orig modify date.
  LANG=C defaulttexteditor /tmp/momanager/$SSSFILE.$ORIGLANG1
  xASTAT2="`stat --format=%Y "/tmp/momanager/$SSSFILE.$ORIGLANG1"`" #seconds since epoch.
  if [ "$xASTAT1" = "$xASTAT2" ];then
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  [ "$SSSFILE" = "desk_strings" ] && fixdesk en #120212 translate all target files back to english. (using old $SSSFILE)
  [ "$SSSFILE" = "script_strings" ] && fixscripts en #120212 translate all target files back to english. (using old $SSSFILE)
  cp -f /tmp/momanager/$SSSFILE.$ORIGLANG1 /usr/share/sss/$SSSFILE/
  [ "$SSSFILE" = "desk_strings" ] && fixdesk $ORIGLANG1 #120212 translate all target files back to current language. (using new SSSFILE)
  [ "$SSSFILE" = "script_strings" ] && fixscripts $ORIGLANG1 #120212 translate all target files back to current language. (using new SSSFILE)
  gtkdialog-splash -bg '#80FF80' -timeout 3 -text "The desktop and menus are being updated..." &
  LANG=$ORIGLANG /usr/sbin/fixmenus
  pidof jwm >/dev/null
  if [ $? -eq 0 ];then
   LANG=${ORIGLANG} jwm -reload
  fi
  #20230212...
  mkdir -p /tmp/momanager/newtranslations/${APKGNAME}/usr/share/sss/${SSSFILE}/
  cp -f /tmp/momanager/$SSSFILE.$ORIGLANG1 /tmp/momanager/newtranslations/${APKGNAME}/usr/share/sss/${SSSFILE}/
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 #########
 edit_sss)
  APKGNAME="WOOF"
  SSSFILE="$YESSSS_COMBO" #ex: menu_strings.de (located at /usr/share/sss/menu_strings/)
  SSSFILE="`echo -n "$SSSFILE" | rev | cut -f 2-9 -d '.' | rev`" #dump the extension, ex: menu_strings.de -> menu_strings
  #cp -f /usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1 /tmp/momanager/$SSSFILE.$ORIGLANG1
  
  #120224 special handling req'd for doc_strings...
  if [ "$SSSFILE" = "doc_strings" ];then
   #ask what files want to edit (instead of just cycling through all of them)...
   CNT=0 ; CHKBOX_XML=""
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    CNT=$(($CNT + 1))
    CHKBOX_XML="${CHKBOX_XML}
<checkbox><variable>CHKBOX_${CNT}_</variable><default>true</default><label>${TARGETFILE}</label></checkbox>"
   done
   export MMx_DLG="<window title=\"MoManager: Documentation files\" window_position=\"1\" resizable=\"false\" icon-name=\"${WINICON}\">
   <vbox>
    <text><label>Please select the documentation files that you want to edit:</label></text>
    ${CHKBOX_XML}
    <hbox><button ok></button><button cancel></button></hbox>
   </vbox>
   </window>"
   MMxRET="`$GTKDIALOGEXE --program=MMx_DLG`"
   #now edit the doc files...
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
    CODEBLOCK="`sed -n "$sPTN" /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | sed -e '/^#/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
    [ ! "$CODEBLOCK" ] && continue #precaution.
    #allow any character to be the 'marker' for / in the section-id...
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    WHICHCHKBOX="`echo "$CHKBOX_XML" | grep "$TARGETFILE" | head -n 1 | grep -o 'CHKBOX_[0-9]*_'`"
    [ "`echo "$MMxRET" | grep "$WHICHCHKBOX" | grep 'true'`" = "" ] && continue #not selected
    SSS_POST_EXEC=""
    eval "$CODEBLOCK" #has variables SSS_HANDLER_EDITOR, SSS_TRANSLATION_RULE, SSS_HANDLER_VIEWER [, SSS_POST_EXEC]
    SSS_TRANSLATION_FILE="`echo -n "$SSS_TRANSLATION_RULE" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%"`"
    if [ "$TARGETFILE" = "$SSS_TRANSLATION_FILE" ];then
     #the translation is completely replacing the english file, so make a backup of the en file...
     FILETYPE="`echo -n "$TARGETFILE" | rev | cut -f 1 -d '.' | rev`" #ex: htm
     ftPTN="s%\.${FILETYPE}$%-en.${FILETYPE}%"
     ENFILE="`echo -n "$TARGETFILE" | sed -e "$ftPTN"`"
     if [ ! -f "$ENFILE" ];then
      if [ -f ${EASYSFSMNTPT}"${TARGETFILE}" ];then
       cp -f ${EASYSFSMNTPT}"${TARGETFILE}" "$ENFILE" #get it from sfs layer, to ensure it is en.
      else
       cp -f "${TARGETFILE}" "$ENFILE"
      fi
     fi
     TARGETFILE="$ENFILE"
    fi
    killall seamonkey 2>/dev/null
    killall seamonkey-bin 2>/dev/null
    killall geany 2>/dev/null
    [ ! -f "$SSS_TRANSLATION_FILE" ] && cp -a -f $TARGETFILE $SSS_TRANSLATION_FILE
    poptop_func "This is the original English file. Use this for reference only, do not edit. PLEASE WAIT..." orange
    LANG=${ORIGLANG} ${SSS_HANDLER_VIEWER} "$TARGETFILE" &
    dPID=$!
    sleep 10
    poptop_func "You must translate all of the text in this file to '${ORIGLANG1}' language. Edit, then Save, then Quit. Note, if you do not want to change anything, just Quit the editor..." yellow 11
    xASTAT1="`stat --format=%Y "$SSS_TRANSLATION_FILE"`" #seconds since epoch.
    LANG=${ORIGLANG} ${SSS_HANDLER_EDITOR} ${SSS_TRANSLATION_FILE}
    xASTAT2="`stat --format=%Y "$SSS_TRANSLATION_FILE"`" #seconds since epoch.
    kill $dPID
    [ "$xASTAT1" = "$xASTAT2" ] && continue
    DIRTRANSLATIONFILE="`dirname "${SSS_TRANSLATION_FILE}"`"
    mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}${DIRTRANSLATIONFILE}
    cp -a -f "${SSS_TRANSLATION_FILE}" /root/MoManager-${ORIGLANG12}-${APKGNAME}${DIRTRANSLATIONFILE}/
    echo "MACTION=${EXIT} TODAY_DATE=${ADATE} TRANS_FILE='${SSS_TRANSLATION_FILE}' AUTHOR='${AUTHORSPECS}'" >> /root/MoManager-${ORIGLANG12}-${APKGNAME}/write.log
    [ "$SSS_POST_EXEC" ] && ${SSS_POST_EXEC}
    pupdialog --background green --colors --backtitle "MoManager: SSS edit completed" --msgbox "You have translated file \Zb${SSS_TRANSLATION_FILE}\ZB. Click OK button to continue..." 0 0
   done
   mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}
   echo "MACTION=${EXIT} TODAY_DATE=${ADATE} SSS_FILE='/usr/share/sss/${SSSFILE}/${SSSFILE}.${ORIGLANG1}' AUTHOR='${AUTHORSPECS}'" >> /root/MoManager-${ORIGLANG12}-${APKGNAME}/write.log
   mkdir -p /root/MoManager-${ORIGLANG12}-${APKGNAME}/usr/share/sss/${SSSFILE}/
   cp -f /usr/share/sss/${SSSFILE}/$SSSFILE.$ORIGLANG1 /root/MoManager-${ORIGLANG12}-${APKGNAME}/usr/share/sss/${SSSFILE}/
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  
  #sync translated sss-file with original (master) sss-file (/usr/share/sss/$SSSFILE/$SSSFILE)...
  #ex: 'menu_strings' is the master (no translations in it), 'menu_strings.de' has German translations.
  #(woofQ developers only have to edit the master, and the translation sss-files will sync to it).
  #to do this properly have to write code that analyses the sss-files by section, that is, the files
  #have sections, separated by blank lines and headed by an identifier, ex "[_woof_.jwmrc]"
  #note: /usr/sbin/fixmenus has example sed to extract an sss section.
  echo -n "" > /tmp/momanager/$SSSFILE.$ORIGLANG1
  for ASECTIONID in `grep '^\[' /usr/share/sss/${SSSFILE}/${SSSFILE} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _woof_.jwmrc
  do
   sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
   ENCODEBLOCK="`sed -n "$sPTN" /usr/share/sss/${SSSFILE}/${SSSFILE} | sed -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
   case $ASECTIONID in
    general)
     #this section is just comments, pass it straight thru...
     echo '[general]' >> /tmp/momanager/$SSSFILE.$ORIGLANG1
     echo "$ENCODEBLOCK" >> /tmp/momanager/$SSSFILE.$ORIGLANG1
     echo  >> /tmp/momanager/$SSSFILE.$ORIGLANG1
    ;;
    *)
     echo "[${ASECTIONID}]" >> /tmp/momanager/$SSSFILE.$ORIGLANG1
     #find same section in the translated sss-file...
     TRCODEBLOCK="`sed -n "$sPTN" /usr/share/sss/${SSSFILE}/${SSSFILE}.${ORIGLANG1} | sed -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
     echo "$TRCODEBLOCK" | #sed -e 's%\\%\\\\%g' | #121124 pass \ thru read
     while read -r ATRLINE #121124 -r then backslash is not an escape.
     do
      case $ATRLINE in
       CODESTRING*)
        eval "$ATRLINE"
        OKLINE="`echo "$ENCODEBLOCK" | grep "$CODESTRING" | grep "$ENGLISH"`"
        [ "$OKLINE" ] && echo "$ATRLINE" >> /tmp/momanager/$SSSFILE.$ORIGLANG1 #match, so keep it.
       ;;
       *)
        echo "$ATRLINE" >> /tmp/momanager/$SSSFILE.$ORIGLANG1 #probably a comment line.
       ;;
      esac
     done
     #now do it the other way around...
     echo "$ENCODEBLOCK" | #sed -e 's%\\%\\\\%g' | #121124 pass \ thru read
     while read -r AENLINE #121124 -r then backslash is not an escape.
     do
      case $AENLINE in
       CODESTRING*)
        eval "$AENLINE"
        OKLINE="`echo "$TRCODEBLOCK" | grep "$CODESTRING" | grep "$ENGLISH"`"
        [ ! "$OKLINE" ] && echo "$AENLINE" >> /tmp/momanager/$SSSFILE.$ORIGLANG1 #new line not in translated sss-file, so write it (not yet translated).
       ;;
      esac
     done
     echo  >> /tmp/momanager/$SSSFILE.$ORIGLANG1
    ;;
   esac
  done
  echo  >> /tmp/momanager/$SSSFILE.$ORIGLANG1
  
  sync
  killall geany 2>/dev/null
  poptop_func "The SSS file is now open in a text editor. You must only edit between the last two % characters. Edit, then Save, then Quit text editor..."
  ASTAT="`stat --format=%y "/usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1" | cut -f 1 -d ' ' | tr -d '-'`" #so can check against file version in latest woofQ.
  [ -f ${EASYSFSMNTPT}/usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1 ] && ASTAT="`stat --format=%y "${EASYSFSMNTPT}/usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1" | cut -f 1 -d ' ' | tr -d '-' `" #get orig modify date.
  xASTAT1="`stat --format=%Y "/tmp/momanager/$SSSFILE.$ORIGLANG1"`" #seconds since epoch.
  LANG=C defaulttexteditor /tmp/momanager/$SSSFILE.$ORIGLANG1
  xASTAT2="`stat --format=%Y "/tmp/momanager/$SSSFILE.$ORIGLANG1"`" #seconds since epoch.
  if [ "$xASTAT1" = "$xASTAT2" ];then
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  [ "$SSSFILE" = "desk_strings" ] && fixdesk en #120209 translate all target files back to english. (using old $SSSFILE)
  [ "$SSSFILE" = "script_strings" ] && fixscripts en #120209 translate all target files back to english. (using old $SSSFILE)
  cp -f /tmp/momanager/$SSSFILE.$ORIGLANG1 /usr/share/sss/$SSSFILE/
  [ "$SSSFILE" = "desk_strings" ] && fixdesk $ORIGLANG1 #120209 translate all target files back to current language. (using new SSSFILE)
  [ "$SSSFILE" = "script_strings" ] && fixscripts $ORIGLANG1 #120209 translate all target files back to current language. (using new SSSFILE)
  gtkdialog-splash -bg '#80FF80' -timeout 3 -text "The desktop and menus are being updated..." &
  LANG=$ORIGLANG /usr/sbin/fixmenus
  pidof jwm >/dev/null
  if [ $? -eq 0 ];then
   LANG=${ORIGLANG} jwm -reload
  fi
  #20230212...
  mkdir -p /tmp/momanager/newtranslations/${APKGNAME}/usr/share/sss/$SSSFILE/
  cp -f /tmp/momanager/$SSSFILE.$ORIGLANG1 /tmp/momanager/newtranslations/${APKGNAME}/usr/share/sss/${SSSFILE}/
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 ####################
 edit_xml|create_xml) #XML data files.
  if [ "$EXIT" = "edit_xml" ];then
   XMLFILE="`echo -n "$YESXML_COMBO" | cut -f 1 -d ' '`"
   APKGNAME="`echo -n "$YESXML_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')'`"
  else
   XMLFILE="`echo -n "$NOXML_COMBO" | cut -f 1 -d ' '`"
   APKGNAME="`echo -n "$NOXML_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')'`"
  fi
  sync
  killall geany 2>/dev/null
  poptop_func "The XML file is now open in a text editor. Edit, then Save, then Quit text editor..."
  ASTAT="`stat --format=%y "$XMLFILE" | cut -f 1 -d ' ' | tr -d '-' `" #so can check against file version in latest woofQ.
  [ -f "${EASYSFSMNTPT}${XMLFILE}" ] && ASTAT="`stat --format=%y "${EASYSFSMNTPT}${XMLFILE}" | cut -f 1 -d ' ' | tr -d '-' `" #get orig modify date.
  xASTAT1="`stat --format=%Y "${XMLFILE}"`" #seconds since epoch.
  LANG=C defaulttexteditor "${XMLFILE}"
  xASTAT2="`stat --format=%Y "${XMLFILE}"`" #seconds since epoch.
  if [ "$xASTAT1" = "$xASTAT2" ];then
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  #20230212...
  PATHXMLFILE="`dirname "$XMLFILE"`"
  BASEXMLFILE="`basename "$XMLFILE"`"
  mkdir -p /tmp/momanager/newtranslations/${APKGNAME}/${PATHXMLFILE}
  cp -f "${XMLFILE}" /tmp/momanager/newtranslations/${APKGNAME}/${PATHXMLFILE}/
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 #########
 edit_bin) #binary executables. 20230107 have split out create_bin
  ABIN="`echo -n "$YESBIN_COMBO" | cut -f 1 -d '(' | rev | cut -f 2-9 -d ' ' | rev`"
  ANAME="`basename "$ABIN"`"
  aTRANSLANG="`echo -n "$YESBIN_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ' '`" #ex: de
  AMO="`echo -n "$YESBIN_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: mousecheck.mo
  APKGNAME="`echo -n "$YESBIN_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 3 -d ' '`" #ex: bluefish  ex: WOOF
  ATEXTDOMAIN="`basename $AMO .mo`"
  PREFIXLOCALEDIR='/usr/share/locale'
  #120308 there are exceptions to /usr/share/locale. unfortunately looks like i have to hard-code those...
  case $ATEXTDOMAIN in
   ROX-Filer) PREFIXLOCALEDIR='/usr/local/apps/ROX-Filer/Messages' ;;
  esac
  AMOSPEC="${PREFIXLOCALEDIR}/${aTRANSLANG}/LC_MESSAGES/${AMO}"
  mkdir -p "${PREFIXLOCALEDIR}/${aTRANSLANG}/LC_MESSAGES" #120308
  cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot /tmp/momanager/
  cd /tmp/momanager
  ROPID=0 ; POPCOL='yellow'
  BINMSG="A po file is open for editing. Edit, then Save, then Quit text editor..."
  if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po ];then #120309 use pre-existing po file.
   cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po ./${ATEXTDOMAIN}.po
   BINMSG="A po file is open for editing. NOTE: this file was obtained from /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po. Edit, then Save, then Quit text editor..."
   [ -f "$AMOSPEC" ] && cp -f "$AMOSPEC" /tmp/momanager/${ATEXTDOMAIN}.moOLD
  else
   cp -f "$AMOSPEC" /tmp/momanager/${ATEXTDOMAIN}.moOLD
   msgunfmt --no-wrap "$AMOSPEC" > /tmp/momanager/${ATEXTDOMAIN}1.po
   #this syncs textdomain1.po and textdomain.pot, merges to textdomain.po ...
   rm -f ${ATEXTDOMAIN}.po 2>/dev/null
   #130526 L18L: intltool-update fails with ROX-Filer and xdialog, but msgmerge works...
   #LANG=${ORIGLANG} rxvt -e intltool-update --dist --gettext-package=${ATEXTDOMAIN} --output-file=${ATEXTDOMAIN}.po ${ATEXTDOMAIN}1
   LANG=${ORIGLANG} rxvt -e msgmerge --no-wrap --output-file=${ATEXTDOMAIN}.po ${ATEXTDOMAIN}1.po ${ATEXTDOMAIN}.pot  #130526 L18L.  170818
   BINMSG="A mo file has been converted to an editable po file. Edit, then Save, then Quit text editor..."
   #120308 intltool-update is broken with ROX-Filer.pot. need a fallback method...
   if [ ! -s ${ATEXTDOMAIN}.po ];then
    LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot #create po file without any translations.
    LANG=${ORIGLANG} defaulttextviewer /tmp/momanager/${ATEXTDOMAIN}1.po & #warning, this must be different from defaulttexteditor!
    ROPID=$!
    #BINMSG="BAD NEWS: the 'intltool-update' utility was unable to merge your existing translations with the pot file. Therefore, the translations are open in a separate file '${ATEXTDOMAIN}1.po' and you must paste them into '${ATEXTDOMAIN}.po' -- edit the latter only! Edit '${ATEXTDOMAIN}.po', save, then quit..."
    BINMSG="BAD NEWS: the 'msgmerge' utility was unable to merge your existing translations with the pot file. Therefore, the translations are open in a separate file '${ATEXTDOMAIN}1.po' and you must paste them into '${ATEXTDOMAIN}.po' -- edit the latter only! Edit '${ATEXTDOMAIN}.po', save, then quit..."
    POPCOL='LightPink'
   fi
  fi
  sync
  poptop_func "$BINMSG" $POPCOL
  zASTAT1="`stat --format=%Y /tmp/momanager/${ATEXTDOMAIN}.po`" #120309 modify date, seconds.
  if [ "$POEDITOR" ];then
   ${POEDITOR} /tmp/momanager/${ATEXTDOMAIN}.po
  else
   killall geany 2> /dev/null #otherwise geany will return immediately and continue executing this script.
   sleep 0.5
   LANG=C defaulttexteditor /tmp/momanager/${ATEXTDOMAIN}.po
  fi
  [ $ROPID -ne 0 ] && kill $ROPID
  zASTAT2="`stat --format=%Y /tmp/momanager/${ATEXTDOMAIN}.po`" #120309 modify date.
  if [ "$zASTAT1" = "$zASTAT2" ];then #120309
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  LANG=${ORIGLANG} rxvt -e msgfmt --check --output-file=/tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/${ATEXTDOMAIN}.po
#  pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo. If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB. Note, as a precaution, the old mo file is at /tmp/momanager/${ATEXTDOMAIN}.moOLD." 0 0
  pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --extra-button --extra-label "OK, keep po" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo. If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB. Note, as a precaution, the old mo file is at /tmp/momanager/${ATEXTDOMAIN}.moOLD.

WARNING: If there is an existing mo file, MoManager uncompiles it and merges with the pot file, to create the editable po file. However, sometimes this process fails (ROX-Filer for example). In such a case, you can click the \ZbOK, keep po\ZB button, which will retain the po file at \Zb/usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po\ZB, for use next time that you want to edit it with MoManager. Note, if uncertain, do not click this button." 0 0 #120309
  RETVAL=$?
  if [ $RETVAL -eq 3 ];then #extra button
   cp -f /tmp/momanager/${ATEXTDOMAIN}.po /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po
   RETVAL=0
  fi
  if [ $RETVAL -eq 0 ];then
   dirAMOSPEC="$(dirname "$AMOSPEC")"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo "${dirAMOSPEC}/"
   #20230212...
   mkdir -p /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"/
  else
   pupdialog --background pink --backtitle "MoManager: mo edit aborted" --msgbox "You have declined to update the mo file." 0 0
  fi
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 ###########
 create_bin) #binary executables. 20230107 have split out edit_bin
  ABIN="`echo -n "$NOBIN_COMBO" | cut -f 1 -d '(' | rev | cut -f 2 -d ' ' | rev`"
  ATEXTDOMAIN="`echo -n "$NOBIN_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ' '`"
  APKGNAME="`echo -n "$NOBIN_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: bluefish  ex: WOOF
  FIELD2ND="`echo -n "$ORIGLANG12" | cut -f 2 -d '_'`"
  pupdialog --colors --background yellow --backtitle "MoManager: mo language" --yes-label "${ORIGLANG1}" --no-label "${ORIGLANG12}" --yesno "Please click the \Zb${ORIGLANG1}\ZB button to create a translation file for that language. However, the \Zb${FIELD2ND}\ZB designates a particular country in which the language is used, and if you need such a specific translation then click the \Zb${ORIGLANG12}\ZB button. It is highly recommended that you click the \Zb${ORIGLANG1}\ZB button, unless you absolutely must have a country-specific translation..." 0 0
  if [ $? -eq 0 ];then
   aTRANSLANG="$ORIGLANG1"
  else
   aTRANSLANG="$ORIGLANG12"
  fi
  ANAME="`basename "$ABIN"`"
  AMO="${ATEXTDOMAIN}.mo"
  PREFIXLOCALEDIR='/usr/share/locale' #120308
  #120308 there are exceptions to /usr/share/locale. unfortunately looks like i have to hard-code those...
  case $ATEXTDOMAIN in
   ROX-Filer) PREFIXLOCALEDIR='/usr/local/apps/ROX-Filer/Messages' ;;
  esac
  AMOSPEC="${PREFIXLOCALEDIR}/${aTRANSLANG}/LC_MESSAGES/${AMO}"
  mkdir -p "${PREFIXLOCALEDIR}/${aTRANSLANG}/LC_MESSAGES" #120308
  cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot /tmp/momanager/
  cd /tmp/momanager
  ROPID=0 ; POPCOL='yellow'
  BINMSG="A po file is open for editing. Edit, then Save, then Quit text editor..."
  if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po ];then #120309 use pre-existing po file.
   cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po ./${ATEXTDOMAIN}.po
   BINMSG="A po file is open for editing. NOTE: this file was obtained from /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po. Edit, then Save, then Quit text editor..."
   [ -f "$AMOSPEC" ] && cp -f "$AMOSPEC" /tmp/momanager/${ATEXTDOMAIN}.moOLD
  else
   LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot
  fi
  sync
  
  #20230107 msginit o/p needs fix...
  sed -i -e 's%Content-Type: text/plain; charset=ASCII%Content-Type: text/plain; charset=UTF-8%' ${ATEXTDOMAIN}.po
  
  #20230107
  zASTAT1="`stat --format=%Y ${ATEXTDOMAIN}.po`" #modify date, seconds.
  if [ -e /tmp/momanager/FLGautotrans ];then
   poptop_func "Automatic translation in progress..."
   rxvt -e /usr/local/momanager/pre-fill-po ${aTRANSLANG} ${ATEXTDOMAIN}.po
   cp -f /tmp/momanager/po-trans-file /tmp/momanager/${ATEXTDOMAIN}.po
  fi
  
  poptop_func "$BINMSG" $POPCOL
  if [ "$POEDITOR" ];then
   ${POEDITOR} /tmp/momanager/${ATEXTDOMAIN}.po
  else
   killall geany 2> /dev/null #otherwise geany will return immediately and continue executing this script.
   sleep 0.5
   LANG=C defaulttexteditor /tmp/momanager/${ATEXTDOMAIN}.po
  fi
  [ $ROPID -ne 0 ] && kill $ROPID
  zASTAT2="`stat --format=%Y /tmp/momanager/${ATEXTDOMAIN}.po`" #120309 modify date.
  if [ "$zASTAT1" = "$zASTAT2" ];then #120309
   export LANG=$ORIGLANG
   exec momanager reenter
  fi
  LANG=${ORIGLANG} rxvt -e msgfmt --check --output-file=/tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/${ATEXTDOMAIN}.po
#  pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo. If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB. Note, as a precaution, the old mo file is at /tmp/momanager/${ATEXTDOMAIN}.moOLD." 0 0
  pupdialog --background yellow --colors --backtitle "MoManager: post-edit mo" --yes-label "OK" --no-label "Cancel" --extra-button --extra-label "OK, keep po" --yesno "The file /tmp/momanager/${ATEXTDOMAIN}.po has been edited and converted to /tmp/momanager/${ATEXTDOMAIN}.mo. If all went well, click the \ZbOK\ZB button to copy it to \Zb${AMOSPEC}\ZB. Note, as a precaution, the old mo file is at /tmp/momanager/${ATEXTDOMAIN}.moOLD.

WARNING: If there is an existing mo file, MoManager uncompiles it and merges with the pot file, to create the editable po file. However, sometimes this process fails (ROX-Filer for example). In such a case, you can click the \ZbOK, keep po\ZB button, which will retain the po file at \Zb/usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po\ZB, for use next time that you want to edit it with MoManager. Note, if uncertain, do not click this button." 0 0 #120309
  RETVAL=$?
  if [ $RETVAL -eq 3 ];then #extra button
   cp -f /tmp/momanager/${ATEXTDOMAIN}.po /usr/share/doc/nls/${ATEXTDOMAIN}/${aTRANSLANG}.po
   RETVAL=0
  fi
  if [ $RETVAL -eq 0 ];then
   dirAMOSPEC="$(dirname "$AMOSPEC")"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo "${dirAMOSPEC}/"
   #20230212...
   mkdir -p /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"
   cp -f /tmp/momanager/${ATEXTDOMAIN}.mo /tmp/momanager/newtranslations/${APKGNAME}"${dirAMOSPEC}"/
  else
   pupdialog --background pink --backtitle "MoManager: mo edit aborted" --msgbox "You have declined to update the mo file." 0 0
  fi
  export LANG=$ORIGLANG
  exec momanager reenter
 ;;
 
 ########### 20230212
 #20230215 note, any .desktop & .mo not in rootfs-skeleton/usr/share/applications & locale
 # (ie WOOF) must be copied to applications.in and locale.in in /root/[new]translations*
 create_tarball) #create translations tarball
  rm -rf /root/translations-* 2>/dev/null
  mkdir /root/translations-${GENLANG}-${ADATE}
  cat /tmp/momanager/translations4tarball |
  while read ALINE
  do
   toWOOF=no
   aPKGNAME="${ALINE/ */}"
   aFILE="${ALINE#* }"
   aDIR="`dirname "$aFILE"`"
   if [ "$aPKGNAME" == "WOOF" ];then
    mkdir -p /root/translations-${GENLANG}-${ADATE}/${aPKGNAME}"${aDIR}"
    cp -a -f "$aFILE" /root/translations-${GENLANG}-${ADATE}/${aPKGNAME}"${aDIR}"/
   else
    case "$aDIR" in
     *usr/share/applications) #.desktop files
      aDIR2="$(echo -n "$aDIR" | sed -e 's%usr/share/applications%usr/share/applications.in%')"
     ;;
     *usr/share/locale/*) #.mo files
      aDIR2="$(echo -n "$aDIR" | sed -e 's%usr/share/locale/%usr/share/locale.in/%')"
     ;;
     *usr/share/applications.in) #20230216
      toWOOF=yes
      aDIR2="$aDIR"
     ;;
     *usr/share/locale.in/*) #20230216  20230222 this case no longer needed.
      toWOOF=yes
      aDIR2="$aDIR"
     ;;
     *)
      aDIR2="$aDIR"
     ;;
    esac
    mkdir -p /root/translations-${GENLANG}-${ADATE}/${aPKGNAME}"${aDIR}"
    cp -a -f "$aFILE" /root/translations-${GENLANG}-${ADATE}/${aPKGNAME}"${aDIR}"/
    if [ "$aDIR" != "$aDIR2" -o "$toWOOF" == "yes" ];then #20230216
     mkdir -p /root/translations-${GENLANG}-${ADATE}/WOOF"${aDIR2}"
     cp -a -f "$aFILE" /root/translations-${GENLANG}-${ADATE}/WOOF"${aDIR2}"/
    fi
    #20230215 .xml files also go into WOOF folder...
    case "$aFILE" in
     *.xml)
      #rename .xml to .xml.in in WOOF ...
      mkdir -p /root/translations-${GENLANG}-${ADATE}/WOOF"${aDIR}"
      cp -a -f "$aFILE" /root/translations-${GENLANG}-${ADATE}/WOOF"${aFILE}".in
     ;;
    esac
    #20230216 put UNKNOWNs into WOOF...
    if [ "$aPKGNAME" == "UNKNOWN" ];then
     if [ ! -e /root/translations-${GENLANG}-${ADATE}/WOOF"${aFILE}" ];then
      mkdir -p /root/translations-${GENLANG}-${ADATE}/WOOF"${aDIR}"
      cp -a -f "$aFILE" /root/translations-${GENLANG}-${ADATE}/WOOF"${aDIR}"/
     fi
    fi
   fi
  done
  sync
  cd /root
  dir2tgz translations-${GENLANG}-${ADATE}
  sync
  
  #20230212 also tarball of new translations
  #20230607 make backup if already exist... in case person reruns momanager on same day...
  if [ -f /root/newtranslations-${GENLANG}-${ADATE}-3.tar.gz ];then
   mv -f /root/newtranslations-${GENLANG}-${ADATE}-3.tar.gz /root/newtranslations-${GENLANG}-${ADATE}-4.tar.gz
  fi
  if [ -f /root/newtranslations-${GENLANG}-${ADATE}-2.tar.gz ];then
   mv -f /root/newtranslations-${GENLANG}-${ADATE}-2.tar.gz /root/newtranslations-${GENLANG}-${ADATE}-3.tar.gz
  fi
  if [ -f /root/newtranslations-${GENLANG}-${ADATE}-1.tar.gz ];then
   mv -f /root/newtranslations-${GENLANG}-${ADATE}-1.tar.gz /root/newtranslations-${GENLANG}-${ADATE}-2.tar.gz
  fi
  if [ -f /root/newtranslations-${GENLANG}-${ADATE}.tar.gz ];then
   mv -f /root/newtranslations-${GENLANG}-${ADATE}.tar.gz /root/newtranslations-${GENLANG}-${ADATE}-1.tar.gz
  fi
  #rm -f /root/newtranslations-${GENLANG}-${ADATE}.tar.gz 2> /dev/null
  rm -rf /root/newtranslations-${GENLANG}-${ADATE} 2> /dev/null
  #rm -rf /root/newtranslations-* 2>/dev/null
  mkdir -p /tmp/momanager/newtranslations/WOOF/usr/share/applications.in
  mkdir -p /tmp/momanager/newtranslations/WOOF/usr/share/locale.in
  for aPKGPATH in `find /tmp/momanager/newtranslations -mindepth 1 -maxdepth 1 -type d`
  do
   [ "$aPKGPATH" == "" ] && continue
   if [ "${aPKGPATH##*/}" != "WOOF" ];then
    if [ -d ${aPKGPATH}/usr/share/applications ];then
     cp -a -f ${aPKGPATH}/usr/share/applications/* /tmp/momanager/newtranslations/WOOF/usr/share/applications.in/
    fi
    if [ -d ${aPKGPATH}/usr/share/locale ];then
     cp -a -f ${aPKGPATH}/usr/share/locale/* /tmp/momanager/newtranslations/WOOF/usr/share/locale.in/
    fi
   fi
  done
  #20230215 .xml files must also go into WOOF...
  for aXML in $(find /tmp/momanager/newtranslations -type f -name '*.xml' | grep '/usr/local/')
  do
   [ "$aXML" == "" ] && continue
   [ ! -f "$aXML" ] && continue
   bXML="$(echo -n "$aXML" | grep -o '/usr/local/.*')"
   if [ ! -e /tmp/momanager/newtranslations/WOOF${bXML} ];then
    #rename them as .xml.in
    cp -a -f "$aXML" /tmp/momanager/newtranslations/WOOF"${bXML}".in
   fi
  done
  cp -a -f /tmp/momanager/newtranslations /root/newtranslations-${GENLANG}-${ADATE}
  dir2tgz /root/newtranslations-${GENLANG}-${ADATE}
  sync
  
  pupdialog --colors --background '#8080FF' --backtitle "Translations tarballs created" --msgbox "/root/translations-${GENLANG}-${ADATE}.tar.gz has all translations.\n/root/newtranslations-${GENLANG}-${ADATE}.tar.gz has new and edited translations \Z1\Zbsince power-on\ZB\Zn.\n\n\Z1WARNING: If reboot the computer on the same date ${DATE} and click the OK button to generate another newtranslations tarball, the previous one will be deleted. In that situation, be sure to rename the previous tarball so that it will not be deleted.\Zn" 0 0
 ;;
esac

###END###
