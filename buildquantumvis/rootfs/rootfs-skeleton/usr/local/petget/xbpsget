#!/bin/bash
#20240303 install an .xbps package in easyvoid.
#copied code from installpreview.sh
#use this script in a running easyvoid.
#pass in full pkg name, ex: abiword-1.2.4_1.x86_64.xbps
# (if not in current directory, then it will need the path)
#optional "+" or "-" to install or remove pkg.
#optional 2nd param "quiet" to not have the GUIs.
#20240306 full path /usr/bin/xbps-install and xbps-remove
#20240318

export TEXTDOMAIN=xbpsget
export OUTPUT_CHARSET=UTF-8

PARAM1="$1"
QUIET="$2"

RP="$(realpath ${0})"
if [ "${RP/*buildquantumvis*/yes}" == "yes" ];then
 #running in woofQV
 L1="${RP/buildquantumvis*/buildquantumvis}"
 RUNNINGWOOF=yes
else
 #running in quirky
 L1='/usr/local/petget'
 #...note, woofQV has copied pkg-fix and support folders into /usr/local/petget
 RUNNINGWOOF=no
fi

xARCH="$(arch)"
mkdir -p /tmp/woofQV
. /var/local/woofQV/VARS #has E1

. /etc/DISTRO_SPECS

export XBPS_ARCH="$xARCH"

size_func() {
 local SK
 SK=$1
 #$1 is size in KiB, change to more human-readable
 if [ $SK -gt 1048576 ];then #1024*1024
  SM="$(LANG=C dc -e "2 k ${SK} 1048576 / p")"
  SM="$(LANG=C printf "%.2f" $SM)GB"
 else
  if [ $SK -lt 100 ];then
   SM="${SK}KB"
  else
   SM="$(LANG=C dc -e "1 k ${SK} 1024 / p")"
   SM="$(LANG=C printf "%.1f" $SM)MB"
  fi
 fi
}

if [ "${PARAM1:0:1}" == "+" ];then
 xPARAM1="${PARAM1:1:99}"
 OPflg='add'
elif [ "${PARAM1:0:1}" == "-" ];then
 xPARAM1="${PARAM1:1:99}"
 OPflg='rem'
else
 xPARAM1="${PARAM1}"
 OPflg='add'
fi

if [ "${xPARAM1##*/}" != "$xPARAM1" ];then
 PKGPATH="${xPARAM1%/*}"
 PKGPATH="$(realpath "${PKGPATH}")/"
 PKGFULL="${xPARAM1##*/}"
else
 PKGPATH=""
 PKGFULL="${xPARAM1}"
fi

#find the db entry
DBfnd="$(grep -H -F "|${PKGFULL}|" /root/.packages/Packages-void-current /root/.packages/Packages-void-current-nonfree | head -n 1)"

if [ -z "$DBfnd" ];then
 #this .xbps is not in the void repo. hmmm, put it into the converted-pkgs folder...
 mkdir -p ${E1}/converted-pkgs
 cp -u ${PKGPATH}${PKGFULL} ${E1}/converted-pkgs/ 2>/dev/null
 xbps-rindex --add ${E1}/converted-pkgs/${PKGFULL}
 PKGVER="${PKGFULL/.[ax]*/}" #ex: gtk_theme_phacile_blue-1.3_1.x86_64.xbps become gtk_theme_phacile_blue-1.3_1
 REPO="${E1}/converted-pkgs"
 PKGNAME="$(xbps-query --show ${PKGVER} --repository=${REPO} --property pkgname)"
 if [ ! -f ${E1}/converted-pkgs/${PKGNAME} ];then
  echo "CONV_PKG_REPO=''
CONV_PKG_DB=''
CONV_XBPS_PKGFULL='${PKGFULL}'
CONV_XBPS_PKGVER='${PKGVER}'" > ${E1}/converted-pkgs/${PKGNAME}
 fi
else
 REPO=""
 DB_FILE="$(cut -f 1 -d ':' <<<${DBfnd})"
 DB_ENTRY="$(cut -f 2- -d ':' <<<${DBfnd})"
 PKGVER="$(cut -f 1 -d '|' <<<${DB_ENTRY})" #ex: abiword-1.2.4_1
fi

if [ "$OPflg" == "rem" ];then
 /usr/bin/xbps-remove --yes --recursive ${PKGVER}
 if [ -z "$QUIET" ];then
  M1="$(gettext 'This package has been removed:') ${PKGVER}"
  popup "background=a0ffa0 terminate=5 timecount=dn name=xbpsget|<big>${M1}</big>"
 fi
 exit
fi

if [ -z "$REPO" ];then
 N_S="$(/usr/bin/xbps-install --sync --dry-run ${PKGVER} | cut -f 1,5 -d ' ')"
else
 N_S="$(/usr/bin/xbps-install --sync --dry-run --repository=${REPO} ${PKGVER} | cut -f 1,5 -d ' ')"
fi
#line ex: libwv-1.2.9_5 339664
# ...2nd param is the installed size
vPKGS="$(cut -f 1 -d ' ' <<<${N_S})"
#just want the names only...
echo -n '' > /tmp/woofQV/pkgnames-only
for aPKG in ${vPKGS}
do
 if [ "$aPKG" == "$PKGVER" ];then
  if [ -z "$REPO" ];then
   PKGnameonly="$(xbps-query --show ${aPKG} --repository --property=pkgname)"
  else
   PKGnameonly="$(xbps-query --show ${aPKG} --repository=${REPO} --property=pkgname)"
  fi
 else
  if [ -z "$REPO" ];then
   xbps-query --show ${aPKG} --repository --property=pkgname >> /tmp/woofQV/pkgnames-only
  else
   xbps-query --show ${aPKG} --repository=${REPO} --property=pkgname >> /tmp/woofQV/pkgnames-only
  fi
 fi
done
vMISSING="$(cat /tmp/woofQV/pkgnames-only | tr '\n' ' ' | sed -e 's% $%%')"
  
vSIZES="$(cut -f 2 -d ' ' <<<${N_S})"
vS0="$(tr '\n' '+' <<<${vSIZES} | sed -e 's%\+$%%')"
vS1=$((${vS0})) #total installed size, including deps, in bytes
vSIZEK=$((${vS1}/1024))
size_func $vSIZEK
SIZEH="$SM"
  
DB_description="$(cut -f 10 -d '|' <<<${DB_ENTRY})"
ZRAMFREEK=$(busybox df -k | grep ' /$' | tr -s ' ' | cut -f 4 -d ' ')
#20240302 if running in zram, will also need to get free space in wkg-part...
WKGFREEK=$(busybox df -k | grep "mnt/${WKG_DEV}$" | tr -s ' ' | cut -f 4 -d ' ')
#choose the lowest value...
if [ $ZRAMFREEK -gt $WKGFREEK ];then
 FREEK=$WKGFREEK
else
 FREEK=$ZRAMFREEK
fi
size_func $FREEK
FREEH="$SM"
if [ -z "$vMISSING" ];then
 xMISSING="-$(gettext 'nothing')-"
else
 xMISSING="$vMISSING"
fi
  
if [ -z "$QUIET" ];then
 export PREVIEW_DIALOG="<window title=\"$(gettext 'PKGget Package Manager: preinstall')\" image-name=\"/usr/local/lib/X11/pixmaps/pkg24.png\">
<vbox>
 <text use-markup=\"true\"><label>\"$(gettext 'You have chosen to install package') <b>${PKGnameonly}</b>. $(gettext 'A short description of this package is:')\"</label></text>
 <text use-markup=\"true\"><label>\"<b>${DB_description}</b>\"</label></text>
 <text><label>\"  \"</label></text>
 <text><label>$(gettext 'These dependencies will also need to be installed:')</label></text>
 <text use-markup=\"true\"><label>\"<b>${xMISSING}</b>\"</label></text>
 <text><label>$(gettext 'The total installed size will be:') ${SIZEH}</label></text>
 <text><label>$(gettext 'Free space in the working-partition:') ${FREEH}</label></text>
 <text><label>\"  \"</label></text>
 <text><label>$(gettext 'Click the Install button to install. There will be a final confirmation dialog before the actual install.')</label></text>
 <frame>
  <hbox>
   <text><label>$(gettext 'Online information about this package:')</label></text>
   <vbox>
    <button><label>$(gettext 'More info')</label><action>/usr/local/petget/fetchinfo.sh ${PKGVER} & </action></button>
   </vbox>
  </hbox>
 </frame>
 <hbox>
  <button>
   <label>$(gettext 'Install') ${PKGnameonly}</label>
   <action>echo \"${PKGVER}\" > /tmp/petget_installpreview_pkgname</action>
   <action type=\"exit\">BUTTON_INSTALL</action>
  </button>
  <button cancel></button>
 </hbox>
</vbox>
</window>"
 RET1="`gtkdialog --center --program=PREVIEW_DIALOG`"
 grep -q '^EXIT.*BUTTON_INSTALL' <<<${RET1}
 FLG1=$?
else
 FLG1=0
fi

if [ $FLG1 -eq 0 ];then
 if [ -z "$REPO" ];then
  sakura -t "PKGget: install" -x "/usr/bin/xbps-install --ignore-file-conflicts ${PKGVER}"
 else
  sakura -t "PKGget: install" -x "/usr/bin/xbps-install --ignore-file-conflicts --repository=${REPO} ${PKGVER}"
 fi
fi
vSTATE="$(LANG=C xbps-query --show ${PKGVER} --property state)"
if [ "$vSTATE" == "installed" ];then
 if [ -z "$QUIET" ];then
  vM1="$(gettext 'This package and its dependencies have been installed:') ${PKGVER} "
  popup "terminate=5 timecount=dn name=vinstallmsg background=#a0ffa0|<big>${vM1}</big>"
 fi
 #append to /root/.packages/user-installed-packages...
 for aNEW in ${vMISSING} ${PKGnameonly}
 do
  grep -F "|${aNEW}|" /root/.packages/${DB_FILE} >> /root/.packages/user-installed-packages
  if [ $? -eq 0 ];then #20240301
   if [ -f ${L1}/pkg-fix/packages-templates/${aNEW}/pinstall.sh ];then
    cd /
    echo "Executing post-install pinstall.sh for: ${aNEW}"
    /bin/bash ${L1}/pkg-fix/packages-templates/${aNEW}/pinstall.sh
   fi
  fi
 done
 #for backwards compatibility with ppm, list files...
 Fi=0; Fm=0
 DTcnt=0 #20240302
 for aPKG in ${vPKGS}
 do
  if [ -z "$REPO" ];then
   FND1="$(find ${E1}/dl-xbps -maxdepth 1 -type f -name "${aPKG}.*xbps")" #glob *
  else
   FND1="$(find ${REPO} ${E1}/dl-xbps -maxdepth 1 -type f -name "${aPKG}.*xbps" | head -n 1)" #glob *
  fi
  if [ ! -z "$FND1" ];then #should always be found!
   ln -snf ${FND1} /audit/packages/${FND1##*/}
  fi
  xbps-query --files ${aPKG} > /root/.packages/${aPKG}.files
  #20240301 one difference from .files format is symlinks shown
  # ex: /usr/lib/liblua5.4.so.5.4 -> /usr/lib/liblua5.4.so.5.4.6
  #for consistency with normal .files...
  sed -i -e 's% -> .*%%' /root/.packages/${aPKG}.files
  sed -i '/^\/bin$/d' /root/.packages/${aPKG}.files
  sed -i '/^\/lib$/d' /root/.packages/${aPKG}.files
  sed -i '/^\/lib64$/d' /root/.packages/${aPKG}.files
  sed -i '/^\/sbin$/d' /root/.packages/${aPKG}.files
  sed -i '/^\/usr\/lib64$/d' /root/.packages/${aPKG}.files
  sed -i '/^\/usr\/sbin$/d' /root/.packages/${aPKG}.files
  #housekeeping...
  grep -q 'usr/share/icons' /root/.packages/${aPKG}.files
  if [ $? -eq 0 ];then
   Fi=1
  fi
  grep -q 'usr/share/applications' /root/.packages/${aPKG}.files
  if [ $? -eq 0 ];then
   for aDT in $(grep '/usr/share/applications/.*desktop$' /root/.packages/${aPKG}.files)
   do
    [ -z "$aDT" ] && continue
    ${L1}/pkg-fix/dot-desktop-fix ${aDT##*/} #20240229
    build-rox-sendto ${aDT}
    DTcnt=$((${DTcnt}+1)) #20240302
   done
   Fm=1
  fi
 done
 if [ $Fi -eq 1 ];then
  gtk-update-icon-cache -f /usr/share/icons/hicolor/
  gtk-update-icon-cache -f /usr/share/icons/Adwaita/
 fi

 NRflg=0
 grep -q 'usr/share/applications' /root/.packages/${PKGVER}.files
 if [ $? -eq 0 ];then
  for aDT in $(grep '/usr/share/applications/.*desktop$' /root/.packages/${PKGVER}.files)
  do
   [ -z "$aDT" ] && continue
   grep -q '^NoDisplay=true' ${aDT}
   if [ $? -ne 0 ];then
    EXEC="$(grep '^Exec=' ${aDT} | cut -f 2 -d '=' | cut -f 1 -d ' ' | head -n 1)"
    grep -q '/' <<<${EXEC}
    if [ $? -ne 0 ];then
     if [ -x /usr/bin/${EXEC} ];then
      if [ -x /usr/bin/${EXEC}.bin0 ];then
       #this means previous version was already setup to run non-root
       #the update has installed a new /usr/bin/${EXEC}, so revert to run
       #as root, then back to non-root...
       rm -f /usr/bin/${EXEC}.bin0
       rm -f /usr/bin/${EXEC}.bin
       #hide, so setup-client can bring back in future...
       if [ -d /home/.${EXEC} ];then #precaution.
        rm -rf /home/.${EXEC}
       fi
       mv -f /home/${EXEC} /home/.${EXEC} 2>/dev/null
       sed -i -e "s%^${EXEC}=.*%${EXEC}=false%" /root/.clients-status
      fi
      /usr/local/clients/setup-client "${EXEC}=true"
      NRflg=1
      break
     fi
    fi
   fi
  done
 fi

 if [ $Fm -eq 1 ];then
  fixmenus
  jwm -reload
 fi
 if [ -z "$QUIET" ];then
  if [ $NRflg -eq 1 ];then
   export IPV_DLG="<window title=\"PKGget: $(gettext 'package installed')\" image-name=\"/usr/local/lib/X11/pixmaps/pkg24.png\">
     <vbox>
      <text use-markup=\"true\"><label>\"$(gettext 'This package has been installed:') <b>${PKGVER}</b>
      <text use-markup=\"true\"><label>\"$(gettext 'This application has been installed:') <b>${EXEC}</b>
$(gettext 'The application will run non-root, as this user:') ${EXEC}
$(gettext 'With home directory:') /home/${EXEC}
$(gettext 'The app also has private write access to:') /files/apps/${EXEC}\"</label></text>
     <frame>
      <text use-markup=\"true\"><label>\"<b>$(gettext 'Desktop icon')</b>\"</label></text>
      <text use-markup=\"true\"><label>\"$(gettext 'An entry has been created in the menu; however, you can also create a desktop icon.')
$(gettext 'All that you need to do is drag the icon from ROX-Filer, onto the desktop, that is it.')
$(gettext 'You can do it any time in the future, and also can delete the desktop icon by right-click and choose Remove.')\"</label></text>
      <hbox>
       <text><label>$(gettext 'Click for ROX-Filer window:')</label></text>
       <button>
        <label>ROX-Filer</label>
        <action>rox -d /home/${EXEC} & </action>
       </button>
      </hbox>
     </frame>
     <hbox>
      <button ok></button>
     </hbox>
     </vbox></window>"
   gtkdialog --center --program=IPV_DLG
  else
   vM1="$(gettext 'You have installed this package:') ${PKGVER} "
   popup "terminate=5 timecount=dn name=vinstallmsg background=#a0ffa0|<big>${vM1}</big>"
  fi
 fi
else
 #if the pkgs got downloaded but not installed, delete...
 for aPKG in ${vPKGS}
 do
  if [ -z "$REPO" ];then
   FND1="$(find ${E1}/dl-xbps -maxdepth 1 -type f -name "${aPKG}.*xbps")" #glob *
  else
   FND1="$(find ${REPO} ${E1}/dl-xbps -maxdepth 1 -type f -name "${aPKG}.*xbps" | head -n 1)" #glob *
  fi
  if [ ! -z "$FND1" ];then
   aSTATE="$(LANG=C xbps-query --show ${aPKG} --property state)"
   if [ "$aSTATE" != "installed" ];then
    rm -f ${E1}/dl-xbps/${FND1##*/} 2>/dev/null
    rm -f ${REPO}/${FND1##*/} 2>/dev/null
    rm -f /audit/packages/${FND1##*/} 2>/dev/null #this will be a symlink
   fi
  fi
 done
 if [ -z "$QUIET" ];then
  vM1="$(gettext 'You declined to install this package:') ${PKGVER} "
  popup "terminate=5 timecount=dn name=vinstallmsg background=#ffa0a0|<big>${vM1}</big>"
 fi
fi

###end###
