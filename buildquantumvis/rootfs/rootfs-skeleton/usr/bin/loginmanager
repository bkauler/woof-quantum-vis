#!/bin/sh
#note, root2user called via shutdownconfig, changes root to fido.
#110507 TaZOC bug fix.
#120201 rodin.s: internationalized.
#120323 replace 'xmessage' with 'pupmessage'.
#120409 if using minit instead of busybox init.
#130527 extract code that bumps user to root to script 'user2root'.
#130531 explain root, fido and spot.
#130601 offer run some internet apps as user 'spot'. see also usr/sbin/setup-spot and 3builddistro (in woof).
#130604 use actual names of executables, passed to setup-spot. multiple spot checkboxes.
#130723 pre-populate /root/.spot-status.
#130822 add firefox to run as spot. see also 3builddistro.
#140129 initial quirky-fy. fido warning for now.
#140215 app names with dashs not allowed in /root/.spot-status
#140215 add chromium option run as spot. see also 3builddistro, support/setup-spot
#190902 replace "Quirky" and "Puppy" with "EasyOS". add "crippled root".
#20210906 /root/spot moved to /clients/spot
#20210913 app will now run as individual clients, not spot.
#20210919 now /home/spot
#20221023 now supporting zeus administrator ***TODO***
#20221124 modify message, non-root app also able to open|save under /files
#20230111 root-${LANG/_*/}.htm
#20230805 must run this script as root. removed fido. choose root pw. manage clients.

if [ "$(whoami)" != "root" ];then
 if [ -x /usr/bin/sudo-sh ];then
  exec sudo-sh ${PPID} ${0} ${@}
 else
  exec sudo -A ${0} ${@}
 fi
fi

export TEXTDOMAIN=loginmanager
export TEXTDOMAINDIR=/usr/share/locale
export OUTPUT_CHARSET=UTF-8
. gettext.sh

mkdir -p /tmp/loginmanager
ADMINISTRATOR="$(gettext 'administrator')"

touch /root/.clients-status
LISTtrue=''
CLIENTShome="$(find /home -mindepth 1 -maxdepth 1 -type d | grep -v -E 'rover|spot|zeus' | sed -e 's%/home/%%' | sort)"
CLIENTStrue="$(grep 'true$' /root/.clients-status | cut -f 1 -d '=')"
echo -n "$CLIENTStrue" > /tmp/loginmanager/CLIENTStrue
#compose a list of apps running non-root...
for aAPP in $CLIENTShome
do
 [ "$aAPP" == "" ] && continue
 grep -q -x ${aAPP} /tmp/loginmanager/CLIENTStrue
 if [ $? -eq 0 ];then
  if [ "$LISTtrue" == "" ];then
   LISTtrue="${aAPP}"
  else
   LISTtrue="${LISTtrue}, ${aAPP}"
  fi
 fi
done
if [ "$LISTtrue" == "" ];then
 LISTtrue="$(gettext 'No apps running non-root')"
fi
LISTtrue="$(echo -n "$LISTtrue" | fold -s -w 45)"


#<text width-chars=\"60\" use-markup=\"true\"><label>\"<b>*</b> <small>$(gettext 'We offer this and other advice in good faith, however you are running Puppy entirely at your own risk. Puppy is a free product, and there is a total disclaimer of any responsibility for any misbehaviour. You are using Puppy with this understanding.')</small>\"</label></text>

#140129 
M_w1="<text use-markup=\"true\"><label>\"<span fgcolor='"'red'"'><b>$(gettext "Not available in EasyOS")</b></span>\"</label></text>" #need some funny stuff.

#20230111
if [ -f /usr/share/doc/root-${LANG/_*/}.htm ];then
 ROOTHTM="root-${LANG/_*/}.htm"
else
 ROOTHTM="root.htm"
fi

export MAIN_DIALOG="
<window title=\"Login and Security Manager\" icon-name=\"gtk-execute\" resizable=\"false\">
 <vbox>
  <text use-markup=\"true\"><label>\"<b>$(gettext 'Currently you are logged in as:') <big>${ADMINISTRATOR}</big></b>\"</label></text>
  
  <hbox>
   <pixmap><input file>/usr/share/doc/logo96.png</input></pixmap>
   <frame ${ADMINISTRATOR}>
    <text><label>$(gettext "EasyOS is structured in such a way that we consider running as administrator (also known as 'root') to be safe*.")</label></text>
    <text><label>\"$(gettext 'The root password was set at first bootup, and optionally to encrypt folders in the working-partition. The password for encrypted folders cannot be changed; however, you can change the root password.')
$(gettext 'Only characters a-z, A-Z, 0-9, #, %, @ allowed, minimum 6 characters.')\"</label></text>
    <hbox>
     <text><label>\"                  \"</label></text>
     <text><label>$(gettext 'New root password:')</label></text>
     <entry><variable>NEW_PW</variable></entry>
     <button><label>$(gettext 'APPLY')</label><action>/usr/local/clients/set-root-pw \$NEW_PW & </action><action>EXIT:DONE</action></button>
    </hbox>
   </frame>
  </hbox>
  
  <hbox>
   <pixmap><input file>/home/spot/spot.png</input></pixmap>
   <frame client>
    <vbox>
     <text><label>$(gettext "It is possible to run applications as a non-root client user. This gives theoretical extra security.")</label></text>
     <text><label>$(gettext 'These are the apps currently set to run non-root. Click the MODIFY button to add more or remove:')</label></text>
     <hbox>
      <text use-markup=\"true\"><label>\"<b>${LISTtrue}</b>\"</label></text>
      <vbox>
       <button><label>$(gettext 'MODIFY')</label><action>/usr/local/clients/choose-clients & </action><action>EXIT:DONE</action></button>
      </vbox>
     </hbox>
    </vbox>
   </frame>
  </hbox>
  
  <hbox>
   <pixmap><input file>/usr/local/easy_containers/images/container96.png</input></pixmap>
   <frame $(gettext 'crippled root')>
    <vbox>
     <text><label>$(gettext "Crippled-root is implemented in containers, and via the boot menu 'Copy session to RAM & disable drives'.")</label></text>
     <text><label>$(gettext 'Please see the menu Filesystem -> Easy Container Management. Also, the Help button below has links to further information.')</label></text>
    </vbox>
   </frame>
  </hbox>

  <hbox>
   <text><label>$(gettext 'Help:')</label></text>
   <button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action>basichtmlviewer file:///usr/share/doc/${ROOTHTM} & </action></button>
   <text><label>$(gettext '*Legal:')</label></text>
   <button><input file>/usr/local/lib/X11/mini-icons/mini-question.xpm</input><action>basichtmlviewer file:///usr/share/doc/legal/easyos.htm & </action></button>
   <text><label>\"     \"</label></text>
   <button><label>$(gettext 'Exit')</label><action>EXIT:OK</action></button>
  </hbox>
 </vbox>
</window>
"


RETSTRING="`gtkdialog --program=MAIN_DIALOG --center`"
###end###
