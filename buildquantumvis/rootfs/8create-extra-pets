#!/bin/bash

export LANG=C
RP="$(realpath ${0})"
L1="${RP/buildquantumvis*/buildquantumvis}"
mkdir -p /tmp/woofQV
. /var/local/woofQV/VARS #has E1
. ${E1}/rootfs/etc/DISTRO_SPECS

cd ${E1}

###devx pet###
##########################################################
#create a devx pet...
echo "Creating devx-1.0.pet package..."

if [ -d sandbox/devx-1.0 ];then
 rm -rf sandbox/devx-1.0
fi
if [ -f export/devx-1.0.pet ];then
 rm -f export/devx-1.0.pet
fi

mkdir sandbox/devx-1.0
mkdir -p sandbox/devx-1.0/usr/share/doc
echo "devx-1.0.pet is a meta-package to install all Void
packages required for a complete compiling and development environment.
In PKGget, you can uninstall devx-1.0.pet and it will also
uninstall all of the Void packages that had been installed.
" > sandbox/devx-1.0/usr/share/doc/devx.txt

cat >> sandbox/devx-1.0/pinstall.sh <<'_EOF1'
#!/bin/ash
#this is a meta-package to install all required packages for a complete
#compiling development environment.
EXE="${0##*/}"
pidof -o ${$} ${EXE} >/dev/null
if [ $? -ne 0 ];then
 urxvt -geometry 100x35 -e ${0}
 exit
fi
export XBPS_ARCH="$(arch)"
LANG1="${LANG/_*/}"
case "$LANG1" in
 bg) #bulgarian
  S01="Инсталиране на всички пакети за пълна среда за разработка"
  S03="ИНСТАЛИРАНЕТО ЗАВЪРШИ. НАТИСНЕТЕ КЛАВИША ENTER, ЗА ДА ЗАТВОРИТЕ ТЕРМИНАЛА"
 ;;
 cs) #czech
  S01="Instalace všech balíčků pro kompletní vývojové prostředí"
  S03="INSTALACE DOKONČENA. STISKNĚTE TLAČÍTKO ENTER PRO ZAVŘENÍ TERMINÁLU"
 ;;
 cn) #chinese, simplified
  S01="安装完整开发环境的所有软件包"
  S03="安装完成。按 Enter 键关闭终端"
 ;;
 da) #danish
  S01="Installation af alle pakker til et komplet udviklingsmiljø"
  S03="INSTALLERINGEN FÆRDIG. TRYK ENTER FOR AT LUKKE TERMINALEN"
 ;;
 de) #german
  S01="Installieren aller Pakete für eine vollständige Entwicklungsumgebung"
  S03="INSTALLATION BEENDET. DRÜCKEN SIE DIE ENTER-TASTE, UM TERMINAL ZU SCHLIESSEN"
 ;;
 el) #greek
  S01="Εγκατάσταση όλων των πακέτων για ένα πλήρες περιβάλλον ανάπτυξης"
  S03="Η ΕΓΚΑΤΑΣΤΑΣΗ ΟΛΟΚΛΗΡΩΘΗΚΕ. ΠΑΤΗΣΤΕ ΚΛΕΙΔΙ ENTER ΓΙΑ ΚΛΕΙΣΙΜΟ ΤΕΡΜΑΤΙΚΟΥ"
 ;;
 es) #spanish
  S01="Instalación de todos los paquetes para un entorno de desarrollo completo"
  S03="INSTALACIÓN FINALIZADA. PRESIONE LA TECLA ENTER PARA CERRAR EL TERMINAL"
 ;;
 fi) #finnish
  S01="Kaikkien pakettien asennus täydellistä kehitysympäristöä varten"
  S03="ASENNUS VALMIS. SULJE PÄÄTE PAINA ENTER-näppäintä"
 ;;
 fr) #french
  S01="Installation de tous les packages pour un environnement de développement complet"
  S03="INSTALLATION TERMINÉE. APPUYEZ SUR LA TOUCHE ENTRÉE POUR FERMER LE TERMINAL"
 ;;
 hu) #hungarian
  S01="Az összes csomag telepítése a teljes fejlesztői környezethez"
  S03="TELEPÍTÉS KÉSZ. NYOMJA MEG az ENTER billentyűt a TERMINÁL BEZÁRÁSÁHOZ"
 ;;
 is) #icelandic
  S01="Setur upp alla pakka fyrir fullkomið þróunarumhverfi"
  S03="UPPSETNINGU LOKIÐ. ÝTTU á ENTER LYKILINN TIL AÐ LOKA TERMINAL"
 ;;
 it) #italian
  S01="Installazione di tutti i pacchetti per un ambiente di sviluppo completo"
  S03="INSTALLAZIONE COMPLETATA. PREMERE INVIO PER CHIUDERE IL TERMINALE"
 ;;
 nl) #dutch
  S01="Alle pakketten installeren voor een complete ontwikkelomgeving"
  S03="INSTALLEREN VOLTOOID. DRUK OP ENTER-TOETS OM TERMINAL TE SLUITEN"
 ;;
 no) #norwegian
  S01="Installere alle pakker for et komplett utviklingsmiljø"
  S03="INSTALLERING FERDIG. TRYKK ENTER FOR Å LUKKE TERMINALEN"
 ;;
 pl) #polish
  S01="Instalowanie wszystkich pakietów w celu uzyskania kompletnego środowiska programistycznego"
  S03="INSTALACJA ZAKOŃCZONA. NACIŚNIJ KLAWISZ ENTER, ABY ZAMKNĄĆ TERMINAL"
 ;;
 pt) #portugues
  S01="Instalando todos os pacotes para um ambiente de desenvolvimento completo"
  S03="INSTALAÇÃO CONCLUÍDA. PRESSIONE A TECLA ENTER PARA FECHAR O TERMINAL"
 ;;
 ro) #romanian
  S01="Instalarea tuturor pachetelor pentru un mediu de dezvoltare complet"
  S03="INSTALARE TERMINATĂ. APĂSAȚI TASTA ENTER PENTRU A ÎNCHIDE TERMINALUL"
 ;;
 ru) #russian
  S01="Установка всех пакетов для полной среды разработки"
  S03="УСТАНОВКА ЗАВЕРШЕНА. НАЖМИТЕ КЛЮЧ ВВОД, ЧТОБЫ ЗАКРЫТЬ ТЕРМИНАЛ"
 ;;
 sq) #albanian
  S01="Instalimi i të gjitha paketave për një mjedis të plotë zhvillimi"
  S03="INSTALIMI U PËRFUNDOR. SHTYP TASTIN ENTER PËR TË MBYLLUR TERMINALIN"
 ;;
 sr) #serbian
  S01="Инсталирање свих пакета за комплетно развојно окружење"
  S03="ИНСТАЛАЦИЈА ЗАВРШЕНА. ПРИТИСНИТЕ ТИПКУ ЕНТЕР ДА ЗАТВОРИТЕ ТЕРМИНАЛ"
 ;;
 sv) #swedish
  S01="Installera alla paket för en komplett utvecklingsmiljö"
  S03="INSTALLATIONEN AVSLUTAD. TRYCK ENTER FÖR ATT STÄNGA TERMINALEN"
 ;;
 tr) #turkish
  S01="Tam bir geliştirme ortamı için tüm paketler kuruluyor"
  S03="KURULUM TAMAMLANDI. TERMİNALİ KAPATMAK İÇİN ENTER TUŞUNA BASIN"
 ;;
 *)
  S01="Installing all packages for a complete development environment"
  S03="INSTALL FINISHED. PRESS ENTER KEY TO CLOSE TERMINAL"
 ;;
esac
xARCH="$(arch)"
export XBPS_ARCH="$xARCH"
popup "placement=top-middle background=#ffc080|<big>${S01:-Installing all packages for a complete development environment}</big>"
#devx-only-installed-packages has all the pkgs that we want in the devx
#filter-out the scarthgap pkgs that may be in this list...
PKGLIST="$(grep -F '|void|' /root/.packages/devx-only-installed-packages | cut -f 2 -d '|' | tr '\n' ' ')"
for aPKG in ${PKGLIST}
do
 /usr/bin/xbps-install --yes --ignore-file-conflicts ${aPKG}
 if [ $? -ne 0 ];then
  echo -n "Install error. Press ENTER to keep going, any other key to abort: "
  read keepgoing
  if [ -n "$keepgoing" ];then
   break
  fi
  continue
 fi
 grep "|${aPKG}|" /root/.packages/devx-only-installed-packages >> /root/.packages/user-installed-packages
done
killall popup
echo "${S03:-INSTALL FINISHED. PRESS ENTER KEY TO CLOSE TERMINAL}"
read keepgoing
_EOF1

chmod 755 sandbox/devx-1.0/pinstall.sh

cat >> sandbox/devx-1.0/puninstall.sh <<'_EOF1'
#!/bin/ash
#un-install all required packages for a complete
#compiling development environment.
EXE="${0##*/}" #ex: devx-240417.remove, formerly puninstall.sh
pidof -o ${$} ${EXE} >/dev/null
if [ $? -ne 0 ];then
 urxvt -geometry 100x35 -e ${0}
 exit
fi
xARCH="$(arch)"
export XBPS_ARCH="$xARCH"
popup "placement=top-middle background=#ffc080|<big>Uninstalling development packages</big>"
PKGLIST="$(grep -F '\-devel|' /root/.packages/user-installed-packages | cut -f 2 -d '|' | tr '\n' ' ')"
for aPKG in ${PKGLIST}
do
 INST="$(/usr/bin/xbps-query --show ${aPKG} --property state)"
 if [ "${INST}" == "installed" ];then
  PKGVER="$(/usr/bin/xbps-query --show ${aPKG} --property pkgver)"
  #removed:  --recursive
  /usr/bin/xbps-remove --force --clean-cache --yes ${PKGVER}
  if [ $? -ne 0 ];then
   echo -n "Un-install error. Press ENTER to keep going, any other key to abort: "
   read keepgoing
   if [ -n "$keepgoing" ];then
    break
   fi
   continue
  fi
  sed -i "/|${aPKG}|/d" /root/.packages/user-installed-packages
 fi
done
killall popup
echo "UN-INSTALL FINISHED. PRESS ENTER KEY TO CLOSE TERMINAL"
read keepgoing
_EOF1

chmod 755 sandbox/devx-1.0/puninstall.sh

echo "devx-1.0|devx|1.0||Utility;development|32K||devx-1.0.pet||meta-package for complete compile environment||||" > sandbox/devx-1.0/pet.specs

cd sandbox
dir2tgz devx-1.0
tgz2pet devx-1.0.tar.gz
cd ..
mv -f sandbox/devx-1.0.pet export/devx-1.0.pet
sync

#20240927
sed -i '/^devx-/d' rootfs/root/.packages/Packages-pet-noarch-official
cat sandbox/devx-1.0/pet.specs >> rootfs/root/.packages/Packages-pet-noarch-official
sort rootfs/root/.packages/Packages-pet-noarch-official > export/Packages-pet-noarch-official
#cp -f export/Packages-pet-noarch-official rootfs/root/.packages/Packages-pet-noarch-official

#now manually add this pet to the pet-void repo.
echo "Created ${E1}/export/devx-1.0.pet"
#echo "DB entry inserted into ${E1}rootfs/root/.packages/Packages-pet-noarch-official"
echo "Have to manually add this pet to the online pet-void repo"
echo "The updated db file is here:"
echo "${E1}/export/Packages-pet-noarch-official"

###update pet###
#####################################################
echo
echo -n "Press ENTER to continue: "
read keepgoing

if [ -d update ];then
 rm -rf update
fi
mkdir update
mkdir update/qv-update-${DISTRO_VERSION}

#populate from rootfs-skeleton
mkdir -p update/qv-update-${DISTRO_VERSION}/root/Startup
mkdir update/qv-update-${DISTRO_VERSION}/usr

for aF in .profile .Xdefaults .xinitrc .Xmodmap .Xresources
do
 cp -a -f rootfs/root/${aF} update/qv-update-${DISTRO_VERSION}/root/
done
cp -a -u rootfs/root/Startup/* update/qv-update-${DISTRO_VERSION}/root/Startup/

mkdir -p update/qv-update-${DISTRO_VERSION}/root/.packages
for aF in DISTRO_COMPAT_REPOS DISTRO_COMPAT_REPOS-oe-scarthgap DISTRO_PET_REPOS DISTRO_PKGS_SPECS DISTRO_SPECS Packages-oe-scarthgap-official Packages-pet-noarch-official Packages-pet-void-official Packages-void-current Packages-void-current-nonfree PKGS_HOMEPAGES PKGS_MANAGEMENT
do
 cp -a -u rootfs/root/.packages/${aF} update/qv-update-${DISTRO_VERSION}/root/.packages/
done
#cp -a -f rootfs/root/.packages/woof-installed-packages update/qv-update-${DISTRO_VERSION}/root/.packages/woof-installed-packagesNEW

cp -a ${L1}/rootfs/rootfs-skeleton/usr/bin update/qv-update-${DISTRO_VERSION}/usr/
cp -a ${L1}/rootfs/rootfs-skeleton/usr/local update/qv-update-${DISTRO_VERSION}/usr/
rm -rf update/qv-update-${DISTRO_VERSION}/usr/local/lib/X11/pixmaps
cp -a -f --remove-destination rootfs/usr/local/petget/* update/qv-update-${DISTRO_VERSION}/usr/local/petget/
cp -a -f --remove-destination rootfs/usr/local/pup_event/* update/qv-update-${DISTRO_VERSION}/usr/local/pup_event/

mkdir update/qv-update-${DISTRO_VERSION}/usr/share
cp -a ${L1}/rootfs/rootfs-skeleton/usr/share/applications update/qv-update-${DISTRO_VERSION}/usr/share/
cp -a ${L1}/rootfs/rootfs-skeleton/usr/share/applications.in update/qv-update-${DISTRO_VERSION}/usr/share/
cp -a ${L1}/rootfs/rootfs-skeleton/usr/share/locale update/qv-update-${DISTRO_VERSION}/usr/share/
cp -a -u ${L1}/rootfs/rootfs-skeleton/usr/share/locale.in update/qv-update-${DISTRO_VERSION}/usr/share/locale/
cp -a ${L1}/rootfs/rootfs-skeleton/usr/share/pixmaps update/qv-update-${DISTRO_VERSION}/usr/share/
cp -a ${L1}/rootfs/rootfs-skeleton/usr/share/sss update/qv-update-${DISTRO_VERSION}/usr/share/

sync

#vmlinuz, initrd, modules
cp -a rootfs/boot update/qv-update-${DISTRO_VERSION}/
mkdir update/qv-update-${DISTRO_VERSION}/usr/lib
cp -a rootfs/usr/lib/modules update/qv-update-${DISTRO_VERSION}/usr/lib/
#note, rootfs/boot does not have initrd, though it is in the .img file...
cp -a -f initrd/initrd update/qv-update-${DISTRO_VERSION}/boot/initrd-${DISTRO_VERSION}

#update pets
#copy all pets so can install if required...
mkdir update/qv-update-${DISTRO_VERSION}/audit
cp -a dl-pet update/qv-update-${DISTRO_VERSION}/audit/pending-pet
rm -f update/qv-update-${DISTRO_VERSION}/audit/pending-pet/linux_kernel*
rm -f update/qv-update-${DISTRO_VERSION}/audit/pending-pet/youtube-dl-*
rm -f update/qv-update-${DISTRO_VERSION}/audit/pending-pet/firmware*

FND1="$(find rootfs/usr/lib/modules -mindepth 1 -maxdepth 1 -type d | head -n 1)"
KERNVER="${FND1##*/}"

echo -n '' > update/qv-update-${DISTRO_VERSION}/pinstall.sh
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF0'
#!/bin/bash
cp -a -f /pinstall.sh /tmp/pinstall.shCOPY
exec /tmp/pinstall.shCOPY
EXE="${0##*/}"
pidof -o ${$} ${EXE} >/dev/null
if [ $? -ne 0 ];then #run script in a terminal.
 urxvt -geometry 100x35 -e ${0}
 exit
fi
export XBPS_ARCH="$(arch)"
LANG1="${LANG/_*/}"
case "$LANG1" in
 de)
  S01="QV wird aktualisiert, bitte warten..."
  S02="Kernel-Version gebootet:"
  S03="Neue Kernel-Version installiert:"
  S04 ="Klicken Sie auf die Schaltfläche „Ja“, um den neuen Kernel in die Boot-Partition zu kopieren. Er wird dann zum neuen Standard-Boot-Kernel."
  S05="Klicken Sie auf die Schaltfläche Nein, um abzulehnen."
  S06="Hinweis: Sie können dies in Zukunft jederzeit manuell tun, indem Sie vmlinuz- und initrd-Dateien aus dem Ordner /boot in die Boot-Partition kopieren."
  S07="OK, vmlinuz und initrd in die Boot-Partition kopiert. Neustart, damit es wirksam wird."
  S08="Das Update von QV ist abgeschlossen. Dies gilt nicht für die Void XBPS-Pakete; Sie möchten sie möglicherweise aktualisieren oder auch nicht."
  S09="Wenn Sie einen Snapshot haben, der gut funktioniert, möchten Sie möglicherweise nicht alle Void-Pakete vollständig aktualisieren. Machen Sie vielleicht einen Snapshot und aktualisieren Sie ihn."
  S10="Ein vollständiges Update kann in einem Terminal wie folgt durchgeführt werden:"
  S11="Update abgeschlossen, ENTER-Taste drücken, um Terminal zu schließen"
  S12="Empfehlen Sie, dies für die zukünftige Verwendung aufzuschreiben:"
 ;;
 fr)
  S01="Mise à jour de QV, veuillez patienter..."
  S02="Version du noyau démarrée :"
  S03="Nouvelle version du noyau installée :"
  S04="Cliquez sur le bouton Oui pour copier le nouveau noyau sur la partition de démarrage et il deviendra le nouveau noyau de démarrage par défaut."
  S05="Cliquez sur le bouton Non pour refuser."
  S06="Remarque, vous pourrez le faire manuellement à tout moment dans le futur, en copiant les fichiers vmlinuz et initrd du dossier /boot vers la partition de démarrage."
  S07="OK, vmlinuz et initrd copiés sur la partition de démarrage. Redémarrez pour prendre effet."
  S08="La mise à jour de QV est terminée. Cela n'inclut pas les packages Void XBPS ; vous pouvez ou non vouloir les mettre à jour."
  S09="Si vous disposez d'un instantané qui fonctionne correctement, vous ne souhaiterez peut-être pas effectuer une mise à jour complète de tous les packages Void. Prenez peut-être un instantané et mettez-le à jour."
  S10="Une mise à jour complète peut être effectuée dans un terminal comme celui-ci :"
  S11="Mise à jour terminée, appuyez sur la touche ENTER pour fermer le terminal"
  S12="Je recommande de noter ceci pour une utilisation future :"
 ;;
 ru)
  S01="Обновление QV, подождите..."
  S02="Версия ядра загружена:"
  S03="Установлена новая версия ядра:"
  S04="Нажмите кнопку "Да", чтобы скопировать новое ядро в загрузочный раздел, и оно станет новым загрузочным ядром по умолчанию."
  S05="Нажмите кнопку "Нет", чтобы отказаться."
  S06="Обратите внимание: вы можете сделать это вручную в любое время в будущем, скопировав файлы vmlinuz и initrd из папки /boot в загрузочный раздел."
  S07="ОК, vmlinuz и initrd скопированы в загрузочный раздел. Перезагрузитесь, чтобы изменения вступили в силу."
  S08="Обновление QV завершено. Оно не включает пакеты Void XBPS; вы можете захотеть или не захотеть их обновлять."
  S09="Если у вас есть снимок, который работает нормально, возможно, вам не захочется выполнять полное обновление всех пакетов Void. Возможно, сделайте снимок и обновите его."
  S10="Полное обновление можно выполнить в терминале следующим образом:"
  S11="Обновление завершено, нажмите клавишу ENTER, чтобы закрыть терминал"
  S12="Рекомендуем записать это для дальнейшего использования:"
 ;;
 tr)
  S01="QV güncelleniyor, lütfen bekleyin..."
  S02="Çekirdek sürümü başlatıldı:"
  S03="Yeni çekirdek sürümü yüklendi:"
  S04="Yeni çekirdeği önyükleme bölümüne kopyalamak için Evet düğmesini tıklayın, böylece yeni varsayılan önyükleme çekirdeği haline gelecektir."
  S05="Reddetmek için Hayır düğmesini tıklayın."
  S06="Not, gelecekte istediğiniz zaman vmlinuz ve initrd dosyalarını /boot klasöründen önyükleme bölümüne kopyalayarak bunu manuel olarak yapabilirsiniz."
  S07="Tamam, vmlinuz ve initrd önyükleme bölümüne kopyalandı. Etkili olması için yeniden başlatın."
  S08="QV güncellemesi tamamlandı. Buna Void XBPS paketleri dahil değildir; bunları güncellemek isteyebilirsiniz veya istemeyebilirsiniz."
  S09="Eğer düzgün çalışan bir anlık görüntünüz varsa, tüm Void paketlerinin tam güncellemesini yapmak istemeyebilirsiniz. Belki bir anlık görüntü alıp onu güncelleyebilirsiniz."
  S10="Tam bir güncelleme aşağıdaki gibi bir terminalde yapılabilir:"
  S11="Güncelleme tamamlandı, terminali kapatmak için ENTER tuşuna basın"
  S12="Gelecekte kullanmak üzere bunu not etmenizi öneririz:"
 ;;
 *)
  S01="Updating QV, please wait..."
  S02="Kernel version booted:"
  S03="New kernel version installed:"
  S04="Click Yes button to copy the new kernel to the boot-partition and it will become the new default boot kernel."
  S05="Click No button to decline."
  S06="Note, you may do this manually at any time in the future, by copying vmlinuz and initrd files from /boot folder to the boot-partition."
  S07="OK, vmlinuz and initrd copied to boot-partition. Reboot to take effect."
  S08="The update of QV has completed. This does not include the Void XBPS packages; you may or may not want to update them."
  S09="If you have a snapshot that is working nicely, you might not want to do a complete update of all Void packages. Maybe take a snapshot and update that."
  S10="A complete update can be done in a terminal like this:"
  S11="Update finished, press ENTER key to close terminal."
  S12="Recommend write this down for future use:"
  S13="Updating OpenEmbedded packages..."
  S20="Updating Void .xbps packages..."
  S21="Install error. Press ENTER to keep going:"
  S30="Yes"
  S31="No"
 ;;
esac
_EOF0

WOOFPETS="$(grep -F '.pet|' rootfs/root/.packages/woof-installed-packages | cut -f 2,3,8 -d '|' | tr '\n' ' ')"
echo "WOOFPETS='${WOOFPETS}'
KERNVER='${KERNVER}'
DISTRO_VERSION='${DISTRO_VERSION}'" >> update/qv-update-${DISTRO_VERSION}/pinstall.sh
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF2'
popup "placement=top-middle level=top background=#ffe020|<big>${S01:-Updating QV, please wait...}</big> "
rm -f /pinstall.sh
for aP in ${WOOFPETS}
do
 #ex: aP=ycalc|1.09.1-1-pyro64|ycalc-1.09.1-1-pyro64.pet
 #if later or new then install it...
 Pn=$(echo $aP | cut -f 1 -d ':')
 Pv=$(echo $aP | cut -f 2 -d ':')
 Pp=$(echo $aP | cut -f 3 -d ':')
 grep -q -F "|${Pp}|" /root/.packages/woof-installed-packages
 if [ $? -ne 0 ];then
  if [ ! -f /audit/pending-pet/${Pp} ];then
   continue
  fi
  #install it...
  echo "Installing: ${Pp}"
  petget /audit/pending-pet/${Pp}
  sed -i "/${Pn}|/d" /root/.packages/woof-installed-packages
  grep -F "|${Pp}|" /root/.packages/user-installed-packages >> /root/.packages/woof-installed-packages
  sed -i "/${Pn}|/d" /root/.packages/user-installed-packages
 fi
done
sort /root/.packages/woof-installed-packages > /root/.packages/woof-installed-packagesTMP
mv -f /root/.packages/woof-installed-packagesTMP /root/.packages/woof-installed-packages
sync
rm -rf /audit/pending-pet
_EOF2

#scarthgap OE pkgs
cp -a dl-txz update/qv-update-${DISTRO_VERSION}/audit/pending-txz

WOOFTXZS="$(grep -F '.tar.xz|' rootfs/root/.packages/woof-installed-packages | cut -f 2,3,8 -d '|' | tr '\n' ' ')"
echo "WOOFTXZS='${WOOFTXZS}'" >> update/qv-update-${DISTRO_VERSION}/pinstall.sh
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF5'
echo "${S13:-Updating OpenEmbedded packages...}"
for aP in ${WOOFTXZS}
do
 #ex: aP=android-tools|5.1.1.r37|android-tools-5.1.1.r37-r2-nocona-64.tar.xz
 #if later or new then install it...
 Pn=$(echo $aP | cut -f 1 -d ':')
 Pv=$(echo $aP | cut -f 2 -d ':')
 Pp=$(echo $aP | cut -f 3 -d ':')
 grep -q -F "|${Pp}|" /root/.packages/woof-installed-packages
 if [ $? -ne 0 ];then
  if [ ! -f /audit/pending-txz/${Pp} ];then
   continue
  fi
  #install it...
  echo "Installing: ${Pp}"
  petget /audit/pending-txz/${Pp}
  sed -i "/${Pn}|/d" /root/.packages/woof-installed-packages
  grep -F "|${Pp}|" /root/.packages/user-installed-packages >> /root/.packages/woof-installed-packages
  sed -i "/${Pn}|/d" /root/.packages/user-installed-packages
 fi
done
sort /root/.packages/woof-installed-packages > /root/.packages/woof-installed-packagesTMP
mv -f /root/.packages/woof-installed-packagesTMP /root/.packages/woof-installed-packages
sync
rm -rf /audit/pending-txz
killall popup
_EOF5

#update .xbps pkgs...
WOOFXBPS1="$(grep -F '.xbps|' rootfs/root/.packages/woof-installed-packages | cut -f 2 -d '|')"
echo "WOOFXBPS1='${WOOFXBPS1}'" >> update/qv-update-${DISTRO_VERSION}/pinstall.sh
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF7'
echo
echo "${S20:-Updating Void .xbps packages...}"
echo "${WOOFXBPS1}" > /tmp/qv-update-xbps-db0

#if pkg no longer in build, remove it...
for Pn in $(grep -F '.xbps|' /root/.packages/woof-installed-packages | cut -f 2 -d '|' | tr '\n' ' ')
do
 grep -q -F -x -f /tmp/qv-update-xbps-db0 <<<$Pn
 if [ $? -ne 0 ];then
  Pnvr="$(grep -F "|${Pn}|" /root/.packages/woof-installed-packages | cut -f 1 -d '|')"
  sed -i "/${Pn}|/d" /root/.packages/woof-installed-packages
  #xbps-remove ${Pnvr}
  xbps-remove ${Pn}
 fi
done

/usr/bin/xbps-query --list-hold-pkgs > /tmp/qv-update-hold-list
WOOFXBPS2="$(grep -F '.xbps|' /root/.packages/woof-installed-packages | cut -f 2 -d '|')"
echo "${WOOFXBPS2}" >> /tmp/qv-update-xbps-db0
sort -u /tmp/qv-update-xbps-db0 > /tmp/qv-update-xbps-db1
for Pn in $(cat /tmp/qv-update-xbps-db1)
do
 [ "$Pn" == "" ] && continue
 sed -i "/${Pn}|/d" /root/.packages/user-installed-packages
 #don't even try if pkg on hold...
 grep -q "^${Pn}-[0-9]" /tmp/qv-update-hold-list
 if [ $? -eq 0 ];then
  continue
 fi
 /usr/bin/xbps-install --sync --yes --ignore-file-conflicts ${Pn}
 if [ $? -ne 0 ];then
  echo -n "${S21:-Install error. Press ENTER to keep going:} "
  read keepgoing
  if [ -n "$keepgoing" ];then
   break
  fi
  continue
 fi
 #this needs work... ref: 5populate-rootfs ***FIX ME***
 #for now, just run a pinstall.sh script if exists...
 if [ -f /usr/local/petget/pkg-fix/packages-templates/${Pn}/pinstall.sh ];then
  cd /
  /usr/bin/sh /usr/local/petget/pkg-fix/packages-templates/${Pn}/pinstall.sh
 fi
 sed -i "/${Pn}|/d" /root/.packages/woof-installed-packages
 grep -F "|${Pn}|" /root/.packages/user-installed-packages >> /root/.packages/woof-installed-packages
 sed -i "/${Pn}|/d" /root/.packages/user-installed-packages
done
sort /root/.packages/woof-installed-packages > /root/.packages/woof-installed-packagesTMP
mv -f /root/.packages/woof-installed-packagesTMP /root/.packages/woof-installed-packages
sync

WOOFXBPS3="$(grep -F '.xbps|' /root/.packages/user-installed-packages | cut -f 2 -d '|')"
echo "${WOOFXBPS3}" > /tmp/qv-update-xbps-db2
sort -u /tmp/qv-update-xbps-db2 > /tmp/qv-update-xbps-db3
for Pn in $(cat /tmp/qv-update-xbps-db3)
do
 [ "$Pn" == "" ] && continue
 sed -i "/${Pn}|/d" /root/.packages/user-installed-packages
 grep -q -F "|${Pn}|" /root/.packages/woof-installed-packages
 if [ $? -eq 0 ];then
  continue
 fi
 /usr/bin/xbps-install --yes --ignore-file-conflicts ${Pn}
 if [ $? -ne 0 ];then
  echo -n "${S21:-Install error. Press ENTER to keep going:} "
  read keepgoing
  if [ -n "$keepgoing" ];then
   break
  fi
  continue
 fi
done
sync
_EOF7

#maybe update boot-partition vmlinuz and initrd
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF3'
. /etc/rc.d/PUPSTATE
Bflg=0
grep -q "/mnt/${BOOT_DEV} " /proc/mounts
if [ $? -ne 0 ];then
 busybox mount -t ${BOOT_FS} /dev/${BOOT_DEV} /mnt/${BOOT_DEV}
 Bflg=1
fi
BOOT_KERNVER="$(strings /mnt/${BOOT_DEV}/${BOOT_DIR}vmlinuz | grep -o '^[5-9]*\.[0-9]*\.[0-9]*')"
if [ "${BOOT_KERNVER}" != "${KERNVER}" ];then
 export QV_UPDATE_DLG="<window>
 <vbox>
  <text><label>\"${S02:-Kernel version booted:} ${KERNVER}
${S03:-New kernel version installed:} ${BOOT_KERNVER}
${S04:-Click Yes button to copy the new kernel to the boot-partition and it will become the new default boot kernel.}
${S05:-Click No button to decline.}
${S06:-Note, you may do this manually at any time in the future, by copying vmlinuz and initrd files from /boot folder to the boot-partition.}
\"</label></text>
  <hbox>
   <button><label>${S30:-Yes}</label><action>exit:YES</action></button>
   <button><label>${S31:-No}</label><action>exit:NO</action></button>
  </hbox>
 </vbox>
</window>"
 RET1="$(gtkdialog --program=QV_UPDATE_DLG --center)"
 grep -q -F '"YES"' <<<"$RET1"
 if [ $? -eq 0 ];then
  cp -a -f /boot/vmlinuz-${KERNVER} /mnt/${BOOT_DEV}/${BOOT_DIR}vmlinuz
  cp -a -f /boot/initrd-${DISTRO_VERSION} /mnt/${BOOT_DEV}/${BOOT_DIR}initrd
  popup "level=top background=#a0ffa0 terminate=5 timecount=dn name=qvupdate|<big>${S07:-OK, vmlinuz and initrd copied to boot-partition. Reboot to take effect.}</big>"
 fi
fi
if [ $Bflg -eq 1 ];then
 sync
 busybox umount /mnt/${BOOT_DEV}
fi
_EOF3

#maybe tell xbps to update...
CR='
'
cat >> update/qv-update-${DISTRO_VERSION}/pinstall.sh <<'_EOF4'
 popup "background=#c0ffc0 terminate=ok level=top|<big>${S08:-The update of QV has completed. This does not include the Void XBPS packages; you may or may not want to update them.}${CR}${S09:-If you have a snapshot that is working nicely, you might not want to do a complete update of all Void packages. Maybe take a snapshot and update that.}${CR}${S10:-A complete update can be done in a terminal like this:}${CR} xbps-install --sync --update --yes --ignore-file-conflicts</big>"
 echo
 echo "${S11:-Update finished, press ENTER key to close terminal.}"
 read endscript
_EOF4

chmod 755 update/qv-update-${DISTRO_VERSION}/pinstall.sh

#remove db entry after install. see /usr/local/petget/petget
touch update/qv-update-${DISTRO_VERSION}/ONESHOT-qv-update-${DISTRO_VERSION}

echo
echo "Creating update PET pkg...."

SK="$(du -k -s update/qv-update-${DISTRO_VERSION} | cut -f 1)"
echo "qv-update-${DISTRO_VERSION}|qv-update|${DISTRO_VERSION}||Utility|${SK}K||qv-update-${DISTRO_VERSION}.pet||Update QV||||" > sandbox/devx-1.0/pet.specs

cd update
dir2tgz qv-update-${DISTRO_VERSION}
tgz2pet qv-update-${DISTRO_VERSION}.tar.gz
cd ..
echo "Have created update/qv-update-${DISTRO_VERSION}.pet"
###end###
